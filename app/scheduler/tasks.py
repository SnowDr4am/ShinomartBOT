from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot
import pytz
from app.database.models import async_session, QRCode
from sqlalchemy import delete
import app.database.requests as rq
from config import CHANNEL_ID_DAILY
from datetime import datetime

EKATERINBURG_TZ = pytz.timezone('Asia/Yekaterinburg')

async def send_monthly_report(bot: Bot):
    now = datetime.now(EKATERINBURG_TZ)
    year, month = now.year, now.month
    report_data = await rq.get_monthly_report(year, month)
    month_names = {1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
                   7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"}
    report = (
        f"üìÖ <b>–û—Ç—á—ë—Ç –∑–∞ {month_names[month]} {year} –≥–æ–¥–∞</b>\n\n"
        f"üë• <b>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {report_data.get('new_users', 0)}\n"
        f"üõí <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:</b> {report_data.get('sales_count', 0)}\n"
        f"üí∏ <b>–°—É–º–º–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {report_data.get('sales_amount', 0):.2f} —Ä—É–±.\n"
        f"üéÅ <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {report_data.get('bonuses_added', 0):.2f}\n"
        f"üî• <b>–°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {report_data.get('bonuses_spent', 0):.2f}\n\n"
        f"‚ú® <i>–û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω {now.strftime('%d.%m.%Y –≤ %H:%M')}</i>"
    )
    try:
        await bot.send_message(chat_id=CHANNEL_ID_DAILY, text=report, parse_mode="HTML")
        print("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {e}")

async def clear_qr_codes():
    async with async_session() as session:
        try:
            await session.execute(delete(QRCode))
            await session.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ QR-–∫–æ–¥–æ–≤: {e}")
            await session.rollback()

async def setup_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler(timezone=EKATERINBURG_TZ)
    scheduler.add_job(send_monthly_report, trigger=CronTrigger(day="last", hour=18, minute=0), args=[bot], max_instances=1)
    scheduler.add_job(clear_qr_codes, trigger=CronTrigger(hour=00, minute=00), max_instances=1)
    scheduler.start()

    return scheduler