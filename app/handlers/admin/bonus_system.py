from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State

from app.database.admin_requests import add_vip_client, remove_vip_client
from app.handlers.main import admin_router
import app.database.admin_requests as rq
import app.database.requests as common_rq
import app.keyboards.admin.admin as kb
from app.handlers.admin.admin import cmd_job


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–µ—à–±–µ–∫–∞ –∏ –º–∞–∫—Å —Å–ø–∏—Å–∞–Ω–∏—è
class BonusSystemState(StatesGroup):
    users_id = State()
    setting_type = State()
    amount = State()
    giftAmount = State()
    waiting_phone_add = State()
    waiting_phone_remove = State()


@admin_router.callback_query(F.data.startswith('change:'))
async def change_setting(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    setting_type = callback.data.split(':')[1]
    ru_setting_type = await setting_type_rus(setting_type)

    await state.update_data(setting_type=setting_type)
    await state.set_state(BonusSystemState.amount)
    text = f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <b>{ru_setting_type}</b>"
    if setting_type not in ["voting_bonus", "welcome_bonus"]:
        text += " (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)"
    await callback.message.answer(
        text=text,
        parse_mode="HTML"
    )

@admin_router.message(BonusSystemState.amount)
async def handle_amount_input(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        amount = int(user_input)

        data = await state.get_data()
        setting_type = data.get("setting_type")
        ru_setting_type = await setting_type_rus(setting_type)

        report_text = f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <b>{ru_setting_type} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b> –¥–æ {amount}"

        if setting_type not in ["voting_bonus", "welcome_bonus"]:
            report_text += "%"
            if not (0 <= amount <= 100):
                await message.answer(
                    "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç <b>0</b> –¥–æ <b>100</b>.",
                    parse_mode="HTML"
                )

                return

        await rq.set_bonus_system_settings(amount, setting_type)
        await message.answer(
            text=report_text,
            parse_mode="HTML"
        )
        await state.clear()

        await cmd_job(message)
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode="HTML"
        )

async def setting_type_rus(setting_type):
    if setting_type == 'cashback':
        return "–∫—ç—à–±–µ–∫–∞"
    elif setting_type == 'max_debit':
        return "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è"
    elif setting_type == 'welcome_bonus':
        return "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"
    elif setting_type == 'voting_bonus':
        return "–±–æ–Ω—É—Å–æ–≤ –∑–∞ –æ—Ç–∑—ã–≤"
    elif setting_type == 'vip_cashback':
        return "VIP –∫–µ—à–±–µ–∫–∞"
    else:
        return setting_type

# –ú–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
@admin_router.callback_query(F.data == 'interact_with_user_bonus')
async def interact_with_users_bonus(callback: CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "üéâ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ–Ω—É—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! üéâ\n\n"
        "üí° –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞–º–∏:",
        parse_mode='HTML',
        reply_markup=kb.users_balance
    )

@admin_router.callback_query(F.data.startswith("bonus_users:"))
async def employee_list(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    _, balance = callback.data.split(":")
    balance = float(balance)

    users_dict = await rq.get_users_by_balance(balance)

    await state.update_data(users_dict=users_dict)

    keyboard = await kb.create_users_keyboard(users_dict, page=1)

    await callback.message.edit_text(
        "<b>–û—Ç–æ–±—Ä–∞–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> üìã\n",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data.startswith("page:"))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    page = int(callback.data.split(":")[1])

    data = await state.get_data()
    users_dict = data.get("users_dict", {})

    keyboard = await kb.create_users_keyboard(users_dict, page=page)

    await callback.message.edit_reply_markup(reply_markup=keyboard)

@admin_router.callback_query(F.data.startswith("bonus_user:"))
async def view_user_profile(callback: CallbackQuery):
    await callback.answer()

    _, user_id = callback.data.split(":")

    profile_user_data = await common_rq.get_user_profile(user_id)

    registration_date = profile_user_data['registration_date'].replace("-", ".")

    keyboard = await kb.get_user_profile_admin(user_id)

    await callback.message.edit_text(
        f"<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"<b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</b>\n\n"
        f"<b>üÜî ID:</b> <code>{profile_user_data['user_id']}</code>\n\n"
        f"<b>üëã –ò–º—è:</b> {profile_user_data['name']}\n\n"
        f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}\n\n"
        f"<b>üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {profile_user_data['mobile_phone']}\n\n"
        f"<b>üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {profile_user_data['bonus_balance']} –±–æ–Ω—É—Å–æ–≤\n\n",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@admin_router.callback_query(F.data.startswith("history_purchase_user:"))
async def history_purchase(callback: CallbackQuery):
    await callback.answer("")
    _, user_id = callback.data.split(":")

    transactions = await common_rq.get_last_10_transactions(user_id)

    if not transactions:
        await callback.message.answer("üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞")
        return

    history_message = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–∫—É–ø–æ–∫/—Å–ø–∏—Å–∞–Ω–∏–π:</b>\n\n"

    for transaction in transactions:
        transaction_date = transaction.transaction_date.strftime("%d.%m.%Y %H:%M")
        transaction_type = transaction.transaction_type
        amount = f"{transaction.amount:.2f} —Ä—É–±."

        bonus_text = (
            f"–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {transaction.bonus_amount}"
            if transaction_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
            else f"–°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {transaction.bonus_amount}"
        )

        history_message += (
            f"üìÖ <b>–î–∞—Ç–∞:</b> {transaction_date}\n"
            f"<b>–¢–∏–ø:</b> {transaction_type}\n"
            f"<b>–°—É–º–º–∞:</b> {amount}\n"
            f"<b>{bonus_text}</b>\n"
            f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        )

    await callback.message.answer(history_message, parse_mode="HTML", reply_markup=kb.delete_button_admin)

@admin_router.callback_query(F.data == "delete_button_admin")
async def delete_history_message(callback: CallbackQuery):
    await callback.answer()

    await callback.message.delete()

class GetAmount(StatesGroup):
    amount = State()

@admin_router.callback_query(F.data.startswith("bonus:"))
async def view_user_profile(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    _, action, user_id = callback.data.split(":")

    await state.update_data(user_id=user_id, action=action)

    text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ "
    text += "—É–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å üìà" if action == 'add' else "—É–º–µ–Ω—å—à–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å üìâ"

    await state.set_state(GetAmount.amount)

    await callback.message.answer(
        f"{text} \nüëá",
        parse_mode="HTML"
    )

@admin_router.message(GetAmount.amount)
async def handle_amount_input(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        if user_input.lower()=='–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")

            await cmd_job(message)

            return

        amount = int(user_input)
        if amount <= 0:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
                "–í–≤–µ–¥–∏—Ç–µ <b>–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ</b> –∏–ª–∏ <b>–Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</b>",
                parse_mode="HTML"
            )

            return

        data = await state.get_data()
        user_id = data.get("user_id")
        action = data.get("action")
        await state.clear()

        success = await common_rq.set_bonus_balance(user_id, action, amount, 0, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        if success:
            text = "–°—É–º–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ "
            text += "—É–≤–µ–ª–∏—á–µ–Ω–∞ üìà" if action == 'add' else "—É–º–µ–Ω—å—à–µ–Ω–∞ üìâ"

            await message.answer(
                text=f"{text}\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
                parse_mode="HTML"
            )
            await cmd_job(message)

    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode="HTML"
        )

@admin_router.callback_query(F.data == 'presentBonus')
async def present_bonus(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    await callback.message.answer(
        "üéÅ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–æ—Ä–º–∞—Ç: 89998887766) "
        "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>all</code> –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤—Å–µ–º:\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        parse_mode='HTML',
        reply_markup=kb.cancel_bonus_system
    )
    await state.set_state(BonusSystemState.users_id)

@admin_router.message(BonusSystemState.users_id)
async def process_give_bonus_user_id(message: Message, state: FSMContext):
    try:
        user_input = message.text.strip().lower()
        if user_input == "all":
            users = await rq.get_tg_id_users()

            await state.update_data(users_id=users)
            await message.answer(
                f"üî¢ –ë–æ–Ω—É—Å—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã <b>{len(users)}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤:",
                parse_mode='HTML',
                reply_markup=kb.cancel_bonus_system
            )
            await state.set_state(BonusSystemState.giftAmount)
        else:
            if not user_input.isdigit() or len(user_input) != 11:
                return await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: <code>89998887766</code>",
                    parse_mode='HTML'
                )

            user = await common_rq.get_user_by_phone(user_input)
            if not user:
                return await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=kb.cancel_bonus_system
                )
            await state.update_data(users_id=[user.user_id])
            await message.answer(
                f"üë§ –ë–æ–Ω—É—Å—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
                f"<code>{user_input}</code>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤:",
                parse_mode='HTML',
                reply_markup=kb.cancel_bonus_system
            )
            await state.set_state(BonusSystemState.giftAmount)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
        await cmd_job(message)

@admin_router.message(BonusSystemState.giftAmount)
async def process_gift(message: Message, state: FSMContext):
    try:
        amount = message.text.strip()

        if not amount.isdigit() or int(amount) <= 0:
            return await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ",
                reply_markup=kb.delete_button_admin
            )

        amount = int(amount)
        data = await state.get_data()
        users = data["users_id"]

        success_count = 0
        failed_users = []

        for user_id in users:
            try:
                result = await common_rq.set_bonus_balance(user_id, "add", amount, 0, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                if result:
                    try:
                        await message.bot.send_message(
                            chat_id=user_id,
                            text=(
                                f"üéÅ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å!</b>\n\n"
                                f"‚ñ´Ô∏è –°—É–º–º–∞: <b>{amount}</b> –±–æ–Ω—É—Å–æ–≤\n"
                                f"‚ñ´Ô∏è –ü—Ä–∏—á–∏–Ω–∞: –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                            ),
                            parse_mode='HTML'
                        )
                        success_count += 1
                    except Exception as notify_error:
                        failed_users.append(f"{user_id} (–æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(notify_error)})")

                else:
                    failed_users.append(str(user_id))

            except Exception as e:
                failed_users.append(f"{user_id} (–æ—à–∏–±–∫–∞: {str(e)})")

        report = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: <b>{success_count}</b>\n"
        )

        if failed_users:
            report += (
                    f"\n‚ùå <b>–û—à–∏–±–∫–∏ ({len(failed_users)}):</b>\n"
                    + "\n".join(f"‚ñ´Ô∏è {user}" for user in failed_users[:5])
            )
            if len(failed_users) > 5:
                report += f"\n... –∏ –µ—â—ë {len(failed_users) - 5} –æ—à–∏–±–æ–∫"

        await message.answer(
            report,
            parse_mode='HTML',
            reply_markup=kb.delete_button_admin
        )

    except Exception as e:
        await message.answer(
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b>\n{str(e)}",
            parse_mode='HTML'
        )
    finally:
        await state.clear()
        await cmd_job(message)

@admin_router.callback_query(F.data == 'vipClients')
async def vip_clients_menu(callback: CallbackQuery):
    await callback.answer()

    vip_clients = await rq.get_vip_clients()

    await callback.message.edit_text(
        "üëë <b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤: {len(vip_clients)}</b>\n\n"
        "ü§ù <b>–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ</b>",
        parse_mode='HTML',
        reply_markup=kb.vip_clients_menu_keyboard
    )

@admin_router.message(F.data == 'none')
async def vip_clients_menu_msg(message: Message):
    vip_clients = await rq.get_vip_clients()

    await message.answer(
        "üëë <b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤: {len(vip_clients)}</b>\n\n"
        "ü§ù <b>–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ</b>",
        parse_mode='HTML',
        reply_markup=kb.vip_clients_menu_keyboard
    )

@admin_router.callback_query(F.data == 'viewVipClient')
async def view_vip_client(callback: CallbackQuery):
    await callback.answer()

    vip_clients = await rq.get_vip_clients()

    if not vip_clients:
        await callback.message.answer("üìò <b>–°–ø–∏—Å–æ–∫ VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç</b>")
        return

    message = "üìò <b>–°–ø–∏—Å–æ–∫ VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
    for vip_client, user in vip_clients:
        user_link = f'<a href="tg://user?id={user.user_id}">{user.name}</a>'
        phone = user.mobile_phone
        message += (
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ <b>{user_link}</b>\n"
            f"üìû <code>{phone}</code>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )

    await callback.message.answer(
        message,
        parse_mode='HTML',
        reply_markup=kb.delete_button_admin
    )

@admin_router.callback_query(F.data.startswith("changeVipClient"))
async def process_change_vip_client(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    _, action = callback.data.split(":")
    if action == 'add':
        await callback.message.answer(
            "üìò <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
            parse_mode='HTML'
        )
        await state.set_state(BonusSystemState.waiting_phone_add)
    else:
        await callback.message.answer(
            "üìò <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n"
            "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
            parse_mode='HTML'
        )
        await state.set_state(BonusSystemState.waiting_phone_remove)

@admin_router.message(BonusSystemState.waiting_phone_add)
async def handle_phone_add(message: Message, state: FSMContext):
    phone_number = message.text.strip()

    try:
        success = await add_vip_client(phone_number)
        if success:
            await message.answer(
                f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n"
                f"üìò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º <code>{phone_number}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤",
                parse_mode='HTML'
            )
        else:
            await message.answer(
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞</b>\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º <code>{phone_number}</code>\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É",
                parse_mode='HTML'
            )
    except ValueError as e:
        await message.answer(str(e))
    finally:
        await state.clear()
        await vip_clients_menu_msg(message)

@admin_router.message(BonusSystemState.waiting_phone_remove)
async def handle_phone_remove(message: Message, state: FSMContext):
    phone_number = message.text.strip()

    try:
        success = await remove_vip_client(phone_number)
        if success:
            await message.answer(
                f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n"
                f"üìò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º <code>{phone_number}</code> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤",
                parse_mode='HTML'
            )
        else:
            await message.answer(
                f"‚ö†Ô∏è <b>–ù–µ –Ω–∞–π–¥–µ–Ω</b>\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º <code>{phone_number}</code> –Ω–µ —è–≤–ª—è–µ—Ç—Å—è VIP-–∫–ª–∏–µ–Ω—Ç–æ–º",
                parse_mode='HTML'
            )
    except ValueError as e:
        await message.answer(str(e))
    finally:
        await state.clear()
        await vip_clients_menu_msg(message)