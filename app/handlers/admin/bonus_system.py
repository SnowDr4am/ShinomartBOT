from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from app.handlers.main import admin_router
import app.database.admin_requests as rq
import app.database.requests as common_rq
import app.keyboards.admin.admin as kb
from app.handlers.admin.admin import cmd_job


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–µ—à–±–µ–∫–∞ –∏ –º–∞–∫—Å —Å–ø–∏—Å–∞–Ω–∏—è
class BonusSystemState(StatesGroup):
    setting_type = State()
    amount = State()


@admin_router.callback_query(F.data.startswith('change:'))
async def change_setting(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    setting_type = callback.data.split(':')[1]

    await state.update_data(setting_type=setting_type)
    await state.set_state(BonusSystemState.amount)
    await callback.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <b>{setting_type}</b> (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):",
        parse_mode="HTML"
    )


@admin_router.message(BonusSystemState.amount)
async def handle_amount_input(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        amount = int(user_input)
        if not (0 <= amount <= 100):
            await message.answer(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç <b>0</b> –¥–æ <b>100</b>.",
                parse_mode="HTML"
            )

            return

        data = await state.get_data()
        setting_type = data.get("setting_type")

        await rq.set_bonus_system_settings(amount, setting_type)
        await message.answer(
            f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ <b>{setting_type}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ <b>{amount}%</b>!",
            parse_mode="HTML"
        )
        await state.clear()

        await cmd_job(message)
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode="HTML"
        )


# –ú–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
@admin_router.callback_query(F.data == 'interact_with_user_bonus')
async def interact_with_users_bonus(callback: CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "üéâ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ–Ω—É—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! üéâ\n\n"
        "üí° –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞–º–∏:",
        parse_mode='HTML',
        reply_markup=kb.users_balance
    )


@admin_router.callback_query(F.data.startswith("bonus_users:"))
async def employee_list(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    _, balance = callback.data.split(":")
    balance = float(balance)

    users_dict = await rq.get_users_by_balance(balance)

    await state.update_data(users_dict=users_dict)

    keyboard = await kb.create_users_keyboard(users_dict, page=1)

    await callback.message.edit_text(
        "<b>–û—Ç–æ–±—Ä–∞–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> üìã\n",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@admin_router.callback_query(F.data.startswith("page:"))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    page = int(callback.data.split(":")[1])

    data = await state.get_data()
    users_dict = data.get("users_dict", {})

    keyboard = await kb.create_users_keyboard(users_dict, page=page)

    await callback.message.edit_reply_markup(reply_markup=keyboard)


@admin_router.callback_query(F.data.startswith("bonus_user:"))
async def view_user_profile(callback: CallbackQuery):
    await callback.answer()

    _, user_id = callback.data.split(":")

    profile_user_data = await common_rq.get_user_profile(user_id)

    registration_date = profile_user_data['registration_date'].replace("-", ".")
    birthday_date = profile_user_data['birthday_date'].replace("-", ".")

    keyboard = await kb.get_user_profile_admin(user_id)

    await callback.message.edit_text(
        f"<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"<b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</b>\n\n"
        f"<b>üÜî ID:</b> <code>{profile_user_data['user_id']}</code>\n\n"
        f"<b>üëã –ò–º—è:</b> {profile_user_data['name']}\n\n"
        f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}\n\n"
        f"<b>üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {profile_user_data['mobile_phone']}\n\n"
        f"<b>üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthday_date}\n\n"
        f"<b>üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {profile_user_data['bonus_balance']} –±–æ–Ω—É—Å–æ–≤\n\n",
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@admin_router.callback_query(F.data.startswith("history_purchase_user:"))
async def history_purchase(callback: CallbackQuery):
    await callback.answer("")
    _, user_id = callback.data.split(":")

    transactions = await common_rq.get_last_10_transactions(user_id)

    if not transactions:
        await callback.message.answer("üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞")
        return

    history_message = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–∫—É–ø–æ–∫/—Å–ø–∏—Å–∞–Ω–∏–π:</b>\n\n"

    for transaction in transactions:
        transaction_date = transaction.transaction_date.strftime("%d.%m.%Y %H:%M")
        transaction_type = transaction.transaction_type
        amount = f"{transaction.amount:.2f} —Ä—É–±."

        bonus_text = (
            f"–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {transaction.bonus_amount}"
            if transaction_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
            else f"–°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {transaction.bonus_amount}"
        )

        history_message += (
            f"üìÖ <b>–î–∞—Ç–∞:</b> {transaction_date}\n"
            f"<b>–¢–∏–ø:</b> {transaction_type}\n"
            f"<b>–°—É–º–º–∞:</b> {amount}\n"
            f"<b>{bonus_text}</b>\n"
            f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        )

    await callback.message.answer(history_message, parse_mode="HTML", reply_markup=kb.delete_button_admin)


@admin_router.callback_query(F.data == "delete_button_admin")
async def delete_history_message(callback: CallbackQuery):
    await callback.answer()

    await callback.message.delete()


class GetAmount(StatesGroup):
    amount = State()

@admin_router.callback_query(F.data.startswith("bonus:"))
async def view_user_profile(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    _, action, user_id = callback.data.split(":")

    await state.update_data(user_id=user_id, action=action)

    text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ "
    text += "—É–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å üìà" if action == 'add' else "—É–º–µ–Ω—å—à–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å üìâ"

    await state.set_state(GetAmount.amount)

    await callback.message.answer(
        f"{text} \nüëá",
        parse_mode="HTML"
    )


@admin_router.message(GetAmount.amount)
async def handle_amount_input(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        if user_input.lower()=='–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")

            await cmd_job(message)

            return

        amount = int(user_input)
        if amount <= 0:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
                "–í–≤–µ–¥–∏—Ç–µ <b>–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ</b> –∏–ª–∏ <b>–Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</b>",
                parse_mode="HTML"
            )

            return

        data = await state.get_data()
        user_id = data.get("user_id")
        action = data.get("action")
        await state.clear()

        success = await common_rq.set_bonus_balance(user_id, action, amount, 0, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        if success:
            text = "–°—É–º–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ "
            text += "—É–≤–µ–ª–∏—á–µ–Ω–∞ üìà" if action == 'add' else "—É–º–µ–Ω—å—à–µ–Ω–∞ üìâ"

            await message.answer(
                text=f"{text}\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
                parse_mode="HTML"
            )
            await cmd_job(message)

    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode="HTML"
        )



