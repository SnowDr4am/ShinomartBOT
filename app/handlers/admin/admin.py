from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from app.handlers.main import admin_router
import app.keyboards.admin.admin as kb
import app.database.admin_requests as rq
import app.database.requests as common_rq


@admin_router.message(Command("admin"))
async def cmd_job(message: Message):
    await message.answer(
        "<b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "üìå –í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        parse_mode='HTML',
        reply_markup=kb.main_menu
    )


@admin_router.callback_query(F.data == 'back_to_main')
async def back_to_main(callback: CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "<b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "üìå –í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        parse_mode='HTML',
        reply_markup=kb.main_menu
    )


@admin_router.callback_query(F.data == 'statistics')
async def statistics(callback: CallbackQuery):
    await callback.answer()

    stats = await rq.get_statistics(period="all")

    await callback.message.edit_text(
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –∑–∞ {stats['period_label']}:</b>\n\n"
        f"üë• <b>–û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}\n"
        f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {stats['total_amount']} ‚ÇΩ\n"
        f"üéÅ <b>–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:</b> {stats['total_bonus_amount']} ‚ÇΩ\n"
        f"üîÑ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {stats['total_transactions']}\n"
        f"üìà <b>–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏:</b> {stats['average_purchase_amount']:.2f} ‚ÇΩ\n"
        f"üü¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['active_users']}\n"
        f"üí≥ <b>–û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö:</b> {stats['total_bonus_balance']} ‚ÇΩ",
        parse_mode="HTML",
        reply_markup=kb.time_period
    )


@admin_router.callback_query(F.data.startswith("statistics:"))
async def handle_statistics_period(callback: CallbackQuery):
    await callback.answer()

    period = callback.data.split(":")[1]

    stats = await rq.get_statistics(period=period)

    await callback.message.edit_text(
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –∑–∞ {stats['period_label']}:</b>\n\n"
        f"üë• <b>–û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}\n"
        f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {stats['total_amount']} ‚ÇΩ\n"
        f"üéÅ <b>–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:</b> {stats['total_bonus_amount']} ‚ÇΩ\n"
        f"üîÑ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {stats['total_transactions']}\n"
        f"üìà <b>–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏:</b> {stats['average_purchase_amount']:.2f} ‚ÇΩ\n"
        f"üü¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['active_users']}\n"
        f"üí≥ <b>–û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö:</b> {stats['total_bonus_balance']} ‚ÇΩ",
        parse_mode="HTML",
        reply_markup=kb.time_period
    )


@admin_router.callback_query(F.data == 'bonus_system')
async def bonus_system(callback: CallbackQuery):
    await callback.answer()

    settings = await common_rq.get_bonus_system_settings()

    await callback.message.edit_text(
        "<b>üíé –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
        f"üîπ <b>–¢–µ–∫—É—â–∏–π –∫—ç—à–±–µ–∫ —Å –ø–æ–∫—É–ø–æ–∫:</b> {settings['cashback']}%\n"
        f"üîπ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–∫—É–ø–∫–∏:</b> {settings['max_debit']}%",
        parse_mode='HTML',
        reply_markup=kb.bonus_system
    )


@admin_router.callback_query(F.data == 'interact_with_user_bonus')
async def interact_with_users_bonus(callback: CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ–Ω—É—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode='HTML',
        reply_markup=kb.users_balance
    )


@admin_router.callback_query(F.data.startswith("bonus_users:"))
async def employee_list(callback: CallbackQuery):
    await callback.answer()

    _, balance = callback.data.split(":")



@admin_router.callback_query(F.data == "employees")
async def employee_list(callback: CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "<b>üë• –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º</b>\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        parse_mode='HTML',
        reply_markup=kb.manage_workers
    )


@admin_router.callback_query(F.data == "personal")
async def employee_list(callback: CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "<b>üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n\n",
        parse_mode="HTML",
        reply_markup=kb.view_personal_type
    )

@admin_router.callback_query(F.data.startswith("personal_list:"))
async def employee_list(callback: CallbackQuery):
    await callback.answer()

    personal_type = callback.data.split(":")[1]

    admin_dict, employee_dict = await rq.get_admin_and_employees_names()

    if personal_type == 'worker':
        personal_type = "<b>üë∑‚Äç‚ôÇÔ∏è –û—Ç–æ–±—Ä–∞–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:</b>"
        keyboard = await kb.inline_personal(employee_dict)
    else:
        personal_type = "<b>üëë –û—Ç–æ–±—Ä–∞–∂–∞—é —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>"
        keyboard = await kb.inline_personal(admin_dict)

    await callback.message.edit_text(personal_type, parse_mode='HTML', reply_markup=keyboard)


@admin_router.callback_query(F.data.startswith("employee_profile:"))
async def view_employee_profile(callback: CallbackQuery):
    await callback.answer()

    parts = callback.data.split(":")

    if len(parts) == 3:
        user_id, period = parts[1], parts[2]
    else:
        user_id, period = parts[1], "all"

    stats = await rq.get_worker_statistics(user_id, period)

    if not stats:
        await callback.message.answer("–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    keyboard = await kb.employee_stats(user_id)

    await callback.message.edit_text(
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</b>\n\n"
        f"üìå <b>–ò–º—è:</b> {stats['name']}\n"
        f"üÜî <b>User ID:</b> {stats['user_id']}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏:</b> {stats['role_assigned_date']}\n\n"
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({stats['period_label']})</b>\n"
        f"üîπ <b>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {stats['total_transactions']}\n"
        f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {stats['total_amount']}\n"
        f"‚ûï <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b> {stats['total_add']}\n"
        f"‚ûñ <b>–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏–π:</b> {stats['total_remove']}",
        parse_mode="HTML",
        reply_markup=keyboard
    )
