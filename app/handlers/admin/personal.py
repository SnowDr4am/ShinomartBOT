from aiogram import F
from aiogram.types import Message, CallbackQuery
from app.handlers.main import admin_router
import app.database.admin_requests as rq
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.handlers.admin.admin import back_to_main, cmd_job
from config import OWNER
import app.keyboards.admin.admin as kb
from datetime import datetime


@admin_router.callback_query(F.data == "personal")
async def employee_list(callback: CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        "<b>üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n\n",
        parse_mode="HTML",
        reply_markup=kb.view_personal_type
    )

@admin_router.callback_query(F.data.startswith("personal_list:"))
async def employee_list(callback: CallbackQuery):
    await callback.answer()

    personal_type = callback.data.split(":")[1]

    admin_dict, employee_dict = await rq.get_admin_and_employees_names()

    if personal_type == 'worker':
        personal_type = "<b>üë∑‚Äç‚ôÇÔ∏è –û—Ç–æ–±—Ä–∞–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:</b>"
        keyboard = await kb.inline_personal(employee_dict)
    else:
        personal_type = "<b>üëë –û—Ç–æ–±—Ä–∞–∂–∞—é —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>"
        keyboard = await kb.inline_personal(admin_dict)

    await callback.message.edit_text(personal_type, parse_mode='HTML', reply_markup=keyboard)


@admin_router.callback_query(F.data.startswith("employee_profile:"))
async def view_employee_profile(callback: CallbackQuery):
    await callback.answer()

    parts = callback.data.split(":")
    user_id, period = parts[1], parts[2] if len(parts) == 3 else "all"

    stats = await rq.get_worker_statistics(user_id, period)
    if not stats:
        await callback.message.answer("–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    avg_rating = await rq.get_worker_average_rating(user_id)
    avg_rating_text = f"{avg_rating}" if avg_rating is not None else "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"

    role_date = stats['role_assigned_date']
    if isinstance(role_date, datetime):
        role_date_str = role_date.strftime("%d.%m.%Y %H:%M")
    else:
        role_date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    keyboard = await kb.employee_stats(user_id)

    await callback.message.edit_text(
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</b>\n\n"
        f"üìå <b>–ò–º—è:</b> <a href='tg://user?id={stats['user_id']}'>{stats['name']}</a>\n"
        f"üÜî <b>User ID:</b> {stats['user_id']}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏:</b> {role_date_str}\n"
        f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫:</b> {stats.get('total_ratings', 0)}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
        f"‚≠ê <b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:</b> {avg_rating_text}\n\n"
        f"<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({stats['period_label']})</b>\n"
        f"üîπ <b>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {stats['total_transactions']}\n"
        f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {stats['total_amount']}\n"
        f"‚ûï <b>–°—É–º–º–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:</b> {stats['total_add']}\n"
        f"‚ûñ <b>–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏–π –±–æ–Ω—É—Å–æ–≤:</b> {stats['total_remove']}",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@admin_router.callback_query(F.data.startswith("worker_reviews:"))
async def view_worker_reviews(callback: CallbackQuery):
    await callback.answer()

    worker_id = callback.data.split(":")[1]
    reviews = await rq.get_worker_reviews(worker_id)

    if not reviews:
        await callback.message.answer("–û—Ç–∑—ã–≤–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ—Ç.", reply_markup=kb.delete_button_admin)
        return

    text = "<b>üìù –û—Ç–∑—ã–≤—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π</b>\n\n"
    for review in reviews:
        review_date = review['review_date'].strftime("%d.%m.%Y %H:%M")
        text += (
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            f"<b>–ê–≤—Ç–æ—Ä:</b> <a href='tg://user?id={review['user_id']}'>{review['name']}</a>\n"
            f"<b>–î–∞—Ç–∞:</b> {review_date}\n"
            f"<b>–°—É–º–º–∞:</b> {review['amount']}\n"
            f"<b>–¢–∏–ø:</b> {review['transaction_type']}\n"
            f"<b>–û—Ü–µ–Ω–∫–∞:</b> {review['rating']} ‚òÖ\n"
            f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {review['comment']}\n"
        )
    text += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"

    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb.delete_button_admin)


class Personal(StatesGroup):
    role = State()
    action = State()
    waiting_for_user_id = State()

@admin_router.callback_query(F.data.startswith('action_admin:'))
async def change_setting(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    _, role, action = callback.data.split(":")

    if action == "remove":
        if role == OWNER:
            await callback.message.answer(
                "üö´ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!\n"
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
            )
            return

        success = await rq.change_user_role(role, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        if success:
            await callback.message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{role}</b> —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.",
                parse_mode="HTML"
            )
            await state.clear()
            await rq.add_role_history(callback.message.from_user.id, role, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

            await back_to_main(callback)
            return
        else:
            await callback.message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{role}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ ID.",
                parse_mode="HTML"
            )
            return

    await state.update_data(action=action, role=role)

    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
                                  "üí° <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ '<code>–æ—Ç–º–µ–Ω–∞</code>'</i>",
                                  parse_mode='HTML')
    await state.set_state(Personal.waiting_for_user_id)


@admin_router.message(Personal.waiting_for_user_id)
async def handle_user_id_input(message: Message, state: FSMContext):
    user_input = message.text.strip()

    if '–æ—Ç–º–µ–Ω–∞' in user_input:
        await state.clear()

        await message.answer(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
            parse_mode='HTML'
        )

        await cmd_job(message)

        return

    data = await state.get_data()
    role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if data.get("role") == "admin" else "–†–∞–±–æ—Ç–Ω–∏–∫"

    success = await rq.change_user_role(user_input, role)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_input}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å <b>{role}</b>.",
            parse_mode="HTML"
        )
        await state.clear()
        await rq.add_role_history(message.from_user.id, user_input, role)

        await cmd_job(message)
    else:
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_input}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ ID.",
            parse_mode="HTML"
        )
        return