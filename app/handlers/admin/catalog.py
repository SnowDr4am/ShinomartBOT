from aiogram import F
from aiogram.types import CallbackQuery

from app.handlers.main import admin_router
import app.database.ItemService as ItemService
import app.keyboards.admin.catalog as catalog_kb
from aiogram.utils.media_group import MediaGroupBuilder


@admin_router.callback_query(F.data.startswith("admin_used:"))
async def handle_admin_used(callback: CallbackQuery):
    type_ = callback.data.split(":")[1]
    title = "üõû –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ä–µ–∑–∏–Ω—ã" if type_ == 'tires' else "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–∏—Å–∫–æ–≤"
    await callback.message.edit_text(
        title,
        reply_markup=catalog_kb.used_goods_submenu_keyboard(type_)
    )


@admin_router.callback_query(F.data.startswith("used_items:"))
async def show_used_items(callback: CallbackQuery):
    await callback.answer()
    _, type_, status = callback.data.split(":")

    type_id = 1 if type_=='tires' else 2

    items = await ItemService.get_items_by_category(type_id, status)

    if not items:
        await callback.message.edit_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")
        return

    title_map = {
        "active": "üü¢ –í –ø—Ä–æ–¥–∞–∂–µ",
        "sold": "‚úÖ –ü—Ä–æ–¥–∞–Ω–æ",
        "tires": "–ë/–£ –†–µ–∑–∏–Ω–∞",
        "discs": "–ë/–£ –î–∏—Å–∫–∏"
    }

    title = (
        f"–†–∞–∑–¥–µ–ª: {title_map.get(type_, '')}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {title_map.get(status, '')}"
    )

    keyboard = catalog_kb.get_admin_items_keyboard(items, status, type_)
    await callback.message.edit_text(
        text=title,
        reply_markup=keyboard
    )


@admin_router.callback_query(F.data.startswith("admin_item_history:"))
async def view_item_history(callback: CallbackQuery):
    await callback.answer()

    item_id = int(callback.data.split(":")[1])
    item = await ItemService.get_item_by_id(item_id)

    price = item.meta_data.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    description = item.meta_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    photos = item.meta_data.get("photos", [])
    season = item.meta_data.get("season")
    worker = item.meta_data.get("worker", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    sold_date = item.meta_data.get("sold_date", "–¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

    season_emoji = {
        "summer": "‚òÄÔ∏è",
        "winter": "‚ùÑÔ∏è",
        "allseason": "üå¶Ô∏è"
    }.get(season, "")

    caption = (
        f"<b>{season_emoji} {item.value}</b>\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description or '‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> {price} ‚ÇΩ\n\n"
        f"üë§ <b>–ü—Ä–æ–¥–∞–ª:</b> {worker}\n\n"
        f"üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> {sold_date}\n"
    )

    media = MediaGroupBuilder()
    for i, photo_id in enumerate(photos):
        if i == 0:
            media.add_photo(media=photo_id, caption=caption, parse_mode='HTML')
        else:
            media.add_photo(media=photo_id)
    await callback.message.answer_media_group(media.build())