from aiogram import F
from aiogram.types import Message, CallbackQuery
from app.handlers.main import admin_router
import app.database.admin_requests as rq
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.handlers.admin.admin import back_to_main, cmd_job


class Personal(StatesGroup):
    role = State()
    action = State()
    waiting_for_user_id = State()

@admin_router.callback_query(F.data.startswith('action:'))
async def change_setting(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    _, role, action = callback.data.split(":")

    if action == "remove":
        if role == '728303180':
            await callback.message.answer(
                "üö´ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!\n"
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
            )
            return

        success = await rq.change_user_role(role, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        if success:
            await callback.message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{role}</b> —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.",
                parse_mode="HTML"
            )
            await state.clear()
            await rq.add_role_history(callback.message.from_user.id, role, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

            await back_to_main(callback)
            return
        else:
            await callback.message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{role}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ ID.",
                parse_mode="HTML"
            )
            return

    await state.update_data(action=action, role=role)

    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(Personal.waiting_for_user_id)


@admin_router.message(Personal.waiting_for_user_id)
async def handle_user_id_input(message: Message, state: FSMContext):
    user_input = message.text.strip()

    data = await state.get_data()
    role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if data.get("role") == "admin" else "–†–∞–±–æ—Ç–Ω–∏–∫"

    success = await rq.change_user_role(user_input, role)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_input}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å <b>{role}</b>.",
            parse_mode="HTML"
        )
        await state.clear()
        await rq.add_role_history(message.from_user.id, user_input, role)

        await cmd_job(message)
    else:
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_input}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ ID.",
            parse_mode="HTML"
        )
        return