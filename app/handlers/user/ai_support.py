from aiogram import F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime
import json
import re
import pytz
import os

from app.handlers.main import ai_router
from app.servers.ai.generate import ai_generate
from app.handlers.user.user import cmd_start
from app.handlers.sched_handlers import update_channel_message
import app.database.requests as common_rq
import app.database.ai_requests as ai_rq
import app.keyboards.user.user as kb


class Gen(StatesGroup):
    inactive = State()
    waiting_for_input = State()
    waiting_for_car_type = State()
    waiting_for_radius = State()
    waiting_for_time = State()
    waiting_for_confirmation = State()
    waiting_for_repair_choice = State()


EKATERINBURG_TZ = pytz.timezone('Asia/Yekaterinburg')

PRICE_LIST = {
    "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω": {
        "–õ–µ–≥–∫–æ–≤–∞—è": {"R14": 2400, "R15": 2600, "R16": 3000, "R17": 3200, "R18": 3400, "R19": 4000, "R20": 4200,
                     "R21": 4500, "R22": 5000},
        "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫": {"R16": 3400, "R17": 3800, "R18": 4200, "R19": 4600, "R20": 5000, "R21": 5500, "R22": 6000}
    },
    "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞": {
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∂–≥—É—Ç–∞": {
            "–õ–µ–≥–∫–æ–≤–∞—è": {"R14": 600, "R15": 600, "R16": 600, "R17": 600, "R18": 600, "R19": 600,
                         "R20": 600, "R21": 600, "R22": 600},
            "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫": {"R16": 700, "R17": 700, "R18": 700, "R19": 700, "R20": 700, "R21": 700,
                            "R22": 700}
        },
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–¥–æ–≤–æ–≥–æ –ø–ª–∞—Å—Ç—ã—Ä—è": {
            "–õ–µ–≥–∫–æ–≤–∞—è": {"R14": 1400, "R15": 1500, "R16": 1600, "R17": 1700, "R18": 1800, "R19": 1900, "R20": 2000,
                         "R21": 2100, "R22": 2200},
            "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫": {"R16": 1700, "R17": 1800, "R18": 1950, "R19": 2100, "R20": 2200, "R21": 2400, "R22": 2500}
        },
        "–í—É–ª–∫–∞–Ω–∏–∑–∞—Ü–∏—è (–±–æ–∫–æ–≤–æ–π –ø–æ—Ä–µ–∑)": {
            "–õ–µ–≥–∫–æ–≤–∞—è": {"R14": 2500, "R15": 2500, "R16": 2500, "R17": 2500, "R18": 2500, "R19": 2500,
                         "R20": 2500, "R21": 2500, "R22": 2500},
            "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫": {"R16": 2500, "R17": 2500, "R18": 2500, "R19": 2500, "R20": 2500, "R21": 2500,
                            "R22": 2500}
        }
    },
    "–ü—Ä–∞–≤–∫–∞ –¥–∏—Å–∫–∞": {
        "–õ–µ–≥–∫–æ–≤–∞—è": {"R14": 1500, "R15": 1600, "R16": 2000, "R17": 2200, "R18": 2500, "R19": 3000, "R20": 3500,
                     "R21": 4000, "R22": 4000},
        "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫": {"R16": 2200, "R17": 2400, "R18": 3000, "R19": 3500, "R20": 4000, "R21": 4500, "R22": 5000}
    },
    "–î–æ—à–∏–ø–æ–≤–∫–∞": {
        "–õ–µ–≥–∫–æ–≤–∞—è": {"R14": 20, "R15": 20, "R16": 20, "R17": 20, "R18": 20, "R19": 20, "R20": 20, "R21": 20, "R22": 20},
        "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫": {"R16": 20, "R17": 20, "R18": 20, "R19": 20, "R20": 20, "R21": 20, "R22": 20}
    }
}

COMPLEX_DESCRIPTION = {
    "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω": """–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç:
1) —Å–Ω—è—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–µ—Å
2) –¥–µ–º–æ–Ω—Ç–∞–∂ –º–æ–Ω—Ç–∞–∂
3) –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
4) –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–µ—Å–∞ –Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—é
5) –º–æ–π–∫–∞ –∫–æ–ª–µ—Å
6) –ø–∞–∫–µ—Ç—ã""",
    "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞": "",
    "–ü—Ä–∞–≤–∫–∞ –¥–∏—Å–∫–∞": "–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞.",
    "–î–æ—à–∏–ø–æ–≤–∫–∞": """–†–µ–º–æ–Ω—Ç–Ω—ã–µ —à–∏–ø—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –∑–∞–≤–æ–¥—Å–∫–∏—Ö —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –¥–∏–∞–º–µ—Ç—Ä–æ–º –æ—Å–Ω–æ–≤–∞–Ω–∏—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∏—Ö –≤ —Å—Ç–∞—Ä—ã—Ö, –∏–∑–Ω–æ—à–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ä—Å—Ç–∏—è—Ö. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–º—à–∏–ø–æ–≤ - —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –∑–∏–º–Ω–µ–π —Ä–µ–∑–∏–Ω—ã.""",
    "–í—É–ª–∫–∞–Ω–∏–∑–∞—Ü–∏—è (–±–æ–∫–æ–≤–æ–π –ø–æ—Ä–µ–∑)": """–í—É–ª–∫–∞–Ω–∏–∑–∞—Ü–∏–µ–π –Ω–∞–∑—ã–≤–∞—é—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–µ–∑–∏–Ω—ã. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞—É—á—É–∫, –∫–æ—Ç–æ—Ä—ã–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —Ä–µ–∑–∏–Ω—É. –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –∫–∞—É—á—É–∫ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –ø—Ä–æ—á–Ω—ã–º –∏ —ç–ª–∞—Å—Ç–∏—á–Ω—ã–º, —É—Å—Ç–æ–π—á–∏–≤—ã–º –∫ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—é –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ö–∏–º–∏–∏, —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–π –∏–ª–∏ –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."""
}


@ai_router.callback_query(F.data == "entry_server")
async def process_entry_server(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    appointment = await ai_rq.get_active_appointment(user_id)

    if appointment:
        service_name = appointment.service.split("(")[0].strip()
        await callback.message.answer(
            f"<b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å:</b>\n{service_name} –Ω–∞ {appointment.date_time.strftime('%H:%M %d.%m.%Y')}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ",
            parse_mode='HTML',
            reply_markup=kb.cancel_appointment_keyboard
        )
    else:
        await callback.message.answer(
            "üõ†Ô∏è <b>–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:</b>\n\n"
            "1Ô∏è‚É£ –°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω\n"
            "2Ô∏è‚É£ –†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞\n"
            "3Ô∏è‚É£ –ü—Ä–∞–≤–∫–∞ –¥–∏—Å–∫–∞\n"
            "4Ô∏è‚É£ –î–æ—à–∏–ø–æ–≤–∫–∞\n\n"
            "ü§ù <b>–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</b> ü§î\n\n"
            "‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML'
        )
        await state.set_state(Gen.waiting_for_input)
    await callback.answer()


@ai_router.callback_query(F.data == "appointment_delete")
async def process_cancel_appointment(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)

    appointment = await ai_rq.get_active_appointment(user_id)
    if not appointment:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode='HTML'
        )
        await callback.answer()
        return

    current_time = datetime.now(EKATERINBURG_TZ)
    current_date = current_time.date()
    appointment_date = appointment.date_time.date()
    is_today = current_date == appointment_date

    success = await ai_rq.cancel_appointment(user_id)
    if success:
        await state.clear()
        await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é", show_alert=True)
        await callback.message.delete()
        await state.set_state(Gen.inactive)

        if is_today:
            await update_channel_message(callback.bot)
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode='HTML'
        )
    await callback.answer()


@ai_router.message(F.text.lower().in_({"–æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", "–æ—Ç–º–µ–Ω–∏", "—Å—Ç–æ–ø", "–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å"}))
async def cancel_operation(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Gen.inactive)
    await cmd_start(message)


@ai_router.message(Gen.waiting_for_car_type)
async def process_car_type(message: Message, state: FSMContext):
    params_response = await ai_generate(message.text, mode="params")
    if not params_response:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–ù–µ—Ç —Å–≤—è–∑–∏ —Å –ò–ò. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return

    json_match = re.search(r'\{.*\}', params_response, re.DOTALL)
    if not json_match:
        await message.answer(
            "<b>–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã:</b>\n–õ–µ–≥–∫–æ–≤–∞—è –∏–ª–∏ –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫?\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return
    params = json.loads(json_match.group(0))

    if "error" in params:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{params['error']}\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
                             parse_mode='HTML')
        return

    data = await state.get_data()
    service = data.get("service", "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω").rstrip(".")
    car_type = params.get("car_type")
    radius = params.get("radius") or data.get("radius")

    if car_type not in ["–õ–µ–≥–∫–æ–≤–∞—è", "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫"]:
        await message.answer(
            "<b>–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã:</b>\n–õ–µ–≥–∫–æ–≤–∞—è –∏–ª–∏ –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫?\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return

    await state.update_data(car_type=car_type)
    base_service = service.split(" ‚Äî ")[0] if "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞" in service else service
    if base_service not in PRICE_LIST:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        await state.clear()
        return

    if radius:
        radius = radius.upper()
        valid_radii = (PRICE_LIST[base_service][car_type].keys() if base_service != "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞" else
                       PRICE_LIST["–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞"]["–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–¥–æ–≤–æ–≥–æ –ø–ª–∞—Å—Ç—ã—Ä—è"][car_type].keys())
        if radius in valid_radii:
            await state.update_data(radius=radius)
            await finalize_service(message, state)
        else:
            radius_range = "R14‚ÄìR22" if car_type == "–õ–µ–≥–∫–æ–≤–∞—è" else "R16‚ÄìR22"
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–†–∞–¥–∏—É—Å –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {radius_range}\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
                parse_mode='HTML')
            await state.set_state(Gen.waiting_for_radius)
    else:
        radius_range = "R14‚ÄìR22" if car_type == "–õ–µ–≥–∫–æ–≤–∞—è" else "R16‚ÄìR22"
        await message.answer(
            f"‚öôÔ∏è <b>{service} ({car_type})</b>\n\n–ö–∞–∫–æ–π —Ä–∞–¥–∏—É—Å –¥–∏—Å–∫–æ–≤? ({radius_range})\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        await state.set_state(Gen.waiting_for_radius)


@ai_router.message(Gen.waiting_for_radius)
async def process_radius(message: Message, state: FSMContext):
    params_response = await ai_generate(message.text, mode="params")
    if not params_response:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–ù–µ—Ç —Å–≤—è–∑–∏ —Å –ò–ò. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return

    json_match = re.search(r'\{.*\}', params_response, re.DOTALL)
    if not json_match:
        await message.answer("‚öôÔ∏è <b>–†–∞–¥–∏—É—Å –¥–∏—Å–∫–æ–≤:</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä, R16\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
                             parse_mode='HTML')
        return
    params = json.loads(json_match.group(0))

    if "error" in params:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{params['error']}\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
                             parse_mode='HTML')
        return

    data = await state.get_data()
    service = data.get("service", "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω").rstrip(".")
    car_type = data.get("car_type") or params.get("car_type")
    radius = params.get("radius")

    if not radius:
        radius_range = "R14‚ÄìR22" if car_type == "–õ–µ–≥–∫–æ–≤–∞—è" else "R16‚ÄìR22"
        await message.answer(
            f"‚öôÔ∏è <b>–†–∞–¥–∏—É—Å –¥–∏—Å–∫–æ–≤:</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä, R16 ({radius_range})\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return

    if car_type not in ["–õ–µ–≥–∫–æ–≤–∞—è", "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫"]:
        await state.update_data(radius=radius.upper())
        await message.answer(
            "<b>–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã:</b>\n–õ–µ–≥–∫–æ–≤–∞—è –∏–ª–∏ –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫?\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        await state.set_state(Gen.waiting_for_car_type)
        return

    base_service = service.split(" ‚Äî ")[0] if "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞" in service else service
    if base_service not in PRICE_LIST:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        await state.clear()
        return

    radius = radius.upper()
    valid_radii = (PRICE_LIST[base_service][car_type].keys() if base_service != "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞" else
                   PRICE_LIST["–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞"]["–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–¥–æ–≤–æ–≥–æ –ø–ª–∞—Å—Ç—ã—Ä—è"][car_type].keys())
    if radius in valid_radii:
        await state.update_data(car_type=car_type, radius=radius)
        await finalize_service(message, state)
    else:
        radius_range = "R14‚ÄìR22" if car_type == "–õ–µ–≥–∫–æ–≤–∞—è" else "R16‚ÄìR22"
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–†–∞–¥–∏—É—Å –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {radius_range}\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')


@ai_router.message(Gen.waiting_for_repair_choice)
async def process_repair_choice(message: Message, state: FSMContext):
    choice = message.text.strip()
    if choice not in ["1", "2", "3"]:
        await message.answer(
            "<b>–£—Å–ª—É–≥–∞: –†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞</b>\n\n"
            "<b>–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞:</b>\n"
            "1) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∂–≥—É—Ç–∞ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç, –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n"
            "<b>2) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–¥–æ–≤–æ–≥–æ –ø–ª–∞—Å—Ç—ã—Ä—è ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç, –≥–∞—Ä–∞–Ω—Ç–∏—è 1 –≥–æ–¥\n"
            "3) –í—É–ª–∫–∞–Ω–∏–∑–∞—Ü–∏—è ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –±–æ–∫–æ–≤—ã—Ö –ø–æ—Ä–µ–∑–æ–≤\n"
            "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç? –í—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3. ‚ÑπÔ∏è</b>\n\n"
            "‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML'
        )
        return

    repair_type = {
        "1": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∂–≥—É—Ç–∞",
        "2": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–¥–æ–≤–æ–≥–æ –ø–ª–∞—Å—Ç—ã—Ä—è",
        "3": "–í—É–ª–∫–∞–Ω–∏–∑–∞—Ü–∏—è (–±–æ–∫–æ–≤–æ–π –ø–æ—Ä–µ–∑)"
    }[choice]
    await state.update_data(service=f"–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞ ‚Äî {repair_type}")
    await message.answer(
        "<b>–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã:</b>\n–õ–µ–≥–∫–æ–≤–∞—è –∏–ª–∏ –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫?\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
        parse_mode='HTML')
    await state.set_state(Gen.waiting_for_car_type)


async def finalize_service(message: Message, state: FSMContext):
    data = await state.get_data()
    service = data.get("service", "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω").rstrip(".")
    car_type = data.get("car_type")
    radius = data.get("radius")

    if not all([car_type, radius]):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–µ –∏–ª–∏ —Ä–∞–¥–∏—É—Å–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        await state.clear()
        return

    base_service = service.split(" ‚Äî ")[0] if "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞" in service else service
    repair_type = service.split(" ‚Äî ")[1] if "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞" in service else None
    if base_service not in PRICE_LIST:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        await state.clear()
        return

    price = (PRICE_LIST[base_service][car_type][radius] if base_service != "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞" else
             PRICE_LIST["–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞"][repair_type][car_type][radius])

    full_service = f"{base_service}{' ‚Äî ' + repair_type if repair_type else ''} ({car_type}, {radius})"
    await state.update_data(service=full_service)
    price_text = f"{'–æ—Ç ' if repair_type == '–í—É–ª–∫–∞–Ω–∏–∑–∞—Ü–∏—è (–±–æ–∫–æ–≤–æ–π –ø–æ—Ä–µ–∑)' else ''}{price} ‚ÇΩ{'/—à–∏–ø' if '–î–æ—à–∏–ø–æ–≤–∫–∞' in base_service else ''}"
    extra_info = COMPLEX_DESCRIPTION.get(base_service if not repair_type else repair_type, "")
    if repair_type == "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∂–≥—É—Ç–∞":
        extra_info = "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç, –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏"
    elif repair_type == "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–¥–æ–≤–æ–≥–æ –ø–ª–∞—Å—Ç—ã—Ä—è":
        extra_info = "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç, –≥–∞—Ä–∞–Ω—Ç–∏—è 1 –≥–æ–¥"

    response = f"üõ†Ô∏è <b>{full_service}</b> ‚Äî {price_text}\n\n{extra_info}\n\n‚è∞ <b>–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å?</b>\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>"

    if repair_type == "–í—É–ª–∫–∞–Ω–∏–∑–∞—Ü–∏—è (–±–æ–∫–æ–≤–æ–π –ø–æ—Ä–µ–∑)":
        photo_path = os.path.join("app", "temp", "vulkan.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(
            photo=photo,
            caption=response,
            parse_mode='HTML'
        )
    elif base_service == "–î–æ—à–∏–ø–æ–≤–∫–∞":
        photo_path = os.path.join("app", "temp", "ship.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(
            photo=photo,
            caption=response,
            parse_mode='HTML'
        )
    else:
        await message.answer(response, parse_mode='HTML')
    await state.set_state(Gen.waiting_for_time)


@ai_router.message(Gen.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = await state.get_data()
    service = data.get("service")
    next_time = data.get("next_time")

    if not all([service, next_time]):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        await state.clear()
        return

    if message.text.lower().strip() in ["–¥–∞", "yes", "–æ–∫", "–ø–æ–¥—Ö–æ–¥–∏—Ç"]:
        next_time = EKATERINBURG_TZ.localize(next_time) if next_time.tzinfo is None else next_time
        user_data = await common_rq.get_user_profile(user_id)
        appointment = await ai_rq.add_appointment(user_id, next_time, service, user_data['mobile_phone'])
        if not appointment:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
                parse_mode='HTML')
            return

        current_time = datetime.now(EKATERINBURG_TZ)
        current_date = current_time.date()
        appointment_date = next_time.date()
        is_today = current_date == appointment_date

        await message.answer(f"‚úÖ <b>–ó–∞–ø–∏—Å—å:</b>\n{service} –Ω–∞ {next_time.strftime('%H:%M %d.%m.%Y')}\n\n–ñ–¥–µ–º –≤–∞—Å!",
                             parse_mode='HTML')
        await state.clear()
        await state.set_state(Gen.inactive)
        await cmd_start(message)

        if is_today:
            await update_channel_message(message.bot)
    else:
        await message.answer(
            "‚è∞ <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä, '—Å–µ–≥–æ–¥–Ω—è –≤ 14:00'\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        await state.set_state(Gen.waiting_for_time)


@ai_router.message(Gen.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = await state.get_data()
    service = data.get("service")

    if not service:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–£—Å–ª—É–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        await state.clear()
        return

    time_response = await ai_generate(message.text, mode="time")
    if not time_response:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–ù–µ—Ç —Å–≤—è–∑–∏ —Å –ò–ò. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return

    try:
        time_data = json.loads(time_response)
        date_time = EKATERINBURG_TZ.localize(
            datetime.strptime(f"{time_data['date']} {time_data['time']}", "%d.%m.%Y %H:%M"))
    except (json.JSONDecodeError, ValueError, KeyError):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–µ–≥–æ–¥–Ω—è –≤ 14:00'\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return

    current_time = datetime.now(EKATERINBURG_TZ)
    if date_time < current_time:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–í—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º. –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return

    if not (9 <= date_time.hour < 21):
        await message.answer(
            "‚è≥ <b>–†–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 21:00</b>\n\n–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return

    if await ai_rq.check_availability(date_time):
        user_data = await common_rq.get_user_profile(user_id)
        if not user_data.get('mobile_phone'):
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
                parse_mode='HTML')
            return
        appointment = await ai_rq.add_appointment(user_id, date_time, service, user_data['mobile_phone'])
        if not appointment:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
                parse_mode='HTML')
            return

        current_date = current_time.date()
        appointment_date = date_time.date()
        is_today = current_date == appointment_date

        await message.answer(f"‚úÖ <b>–ó–∞–ø–∏—Å—å:</b>\n{service} –Ω–∞ {date_time.strftime('%H:%M %d.%m.%Y')}\n\n–ñ–¥–µ–º –≤–∞—Å!",
                             parse_mode='HTML')
        await state.clear()
        await state.set_state(Gen.inactive)
        await cmd_start(message)

        if is_today:
            await update_channel_message(message.bot)
    else:
        next_time = await ai_rq.find_next_available_time(date_time)
        if next_time.tzinfo is not None:
            next_time = next_time.replace(tzinfo=None)
        await state.update_data(next_time=next_time)
        await message.answer(
            f"‚è≥ <b>{date_time.strftime('%H:%M')} –∑–∞–Ω—è—Ç–æ</b>\n\n"
            f"–°–≤–æ–±–æ–¥–Ω–æ: {next_time.strftime('%H:%M %d.%m.%Y')}\n\n"
            "<b>–ü–æ–¥—Ö–æ–¥–∏—Ç?</b> (–¥–∞/–Ω–µ—Ç)\n\n"
            "‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML'
        )
        await state.set_state(Gen.waiting_for_confirmation)


@ai_router.message(Gen.waiting_for_input)
async def generating(message: Message, state: FSMContext):
    service_map = {"1": "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω", "2": "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞", "3": "–ü—Ä–∞–≤–∫–∞ –¥–∏—Å–∫–∞", "4": "–î–æ—à–∏–ø–æ–≤–∫–∞"}
    input_text = message.text.strip()
    service = service_map.get(input_text) or input_text

    response = await ai_generate(service, mode="service")
    if not response:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n–ù–µ—Ç —Å–≤—è–∑–∏ —Å –ò–ò. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>",
            parse_mode='HTML')
        return

    lines = response.split("\n")
    formatted_lines = []
    for line in lines:
        if line.startswith("–£—Å–ª—É–≥–∞:"):
            formatted_lines.append(f"<b>{line.replace('–ü–µ—Ä–µ–æ–±—É–≤–∫–∞ —Ä–µ–∑–∏–Ω—ã', '–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω')}</b>")
            formatted_lines.append("")
        elif "–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?" in line:
            formatted_lines.append(f"<b>{line}</b>")
        elif "–ö–∞–∫–æ–π —Ä–∞–¥–∏—É—Å –¥–∏—Å–∫–æ–≤" in line:
            formatted_lines.append(f"<b>{line}</b>")
        elif "–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã" in line:
            formatted_lines.append(f"<b>{line}</b>")
        elif "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:" in line:
            formatted_lines.append(f"<b>{line}</b>")
            formatted_lines.append("")
        elif "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?" in line:
            formatted_lines.append(f"<b>{line}</b>")
            formatted_lines.append("")
        else:
            formatted_lines.append(line.replace("–ü–µ—Ä–µ–æ–±—É–≤–∫–∞ —Ä–µ–∑–∏–Ω—ã", "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω"))
    formatted_response = "\n".join(formatted_lines) + "\n\n‚ÑπÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>"

    await message.answer(formatted_response, parse_mode='HTML')

    if "–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?" in response:
        service_line = response.split("–£—Å–ª—É–≥–∞: ")[1].split(" ‚Äî ")[0].strip().replace("–ü–µ—Ä–µ–æ–±—É–≤–∫–∞ —Ä–µ–∑–∏–Ω—ã",
                                                                                     "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω")
        car_type = "–õ–µ–≥–∫–æ–≤–∞—è" if "–õ–µ–≥–∫–æ–≤–∞—è" in service_line else service_line.split(" –Ω–∞ ")[1].split(" ")[0]
        radius = service_line.split(" ")[-1]
        await state.update_data(service=f"{service_line.split(' –Ω–∞ ')[0]} ({car_type}, {radius})")
        await state.set_state(Gen.waiting_for_time)
    elif "–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã" in response:
        service = response.split("–£—Å–ª—É–≥–∞: ")[1].split("\n")[0].strip().rstrip(".").replace("–ü–µ—Ä–µ–æ–±—É–≤–∫–∞ —Ä–µ–∑–∏–Ω—ã",
                                                                                           "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω")
        await state.update_data(service=service)
        await state.set_state(Gen.waiting_for_car_type)
    elif "–ö–∞–∫–æ–π —Ä–∞–¥–∏—É—Å –¥–∏—Å–∫–æ–≤" in response:
        service = response.split("–£—Å–ª—É–≥–∞: ")[1].split("\n")[0].strip().rstrip(".").replace("–ü–µ—Ä–µ–æ–±—É–≤–∫–∞ —Ä–µ–∑–∏–Ω—ã",
                                                                                           "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω")
        car_type = service.split(" –Ω–∞ ")[1].replace(" –º–∞—à–∏–Ω—É", "").strip()
        await state.update_data(service=service, car_type=car_type)
        await state.set_state(Gen.waiting_for_radius)
    elif "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?" in response:
        await state.update_data(service="–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–∞")
        await state.set_state(Gen.waiting_for_repair_choice)


@ai_router.message(Gen.inactive)
async def inactive_state(message: Message):
    await message.answer("üöó <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –≤ –º–µ–Ω—é</b>", parse_mode='HTML')