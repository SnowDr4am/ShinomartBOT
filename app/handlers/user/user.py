from aiogram import F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from app.handlers.employee.employee import handle_phone_selection_by_qr
from app.handlers.main import user_router
from app.servers.config import PHONE_NUMBER
import app.keyboards.user.user as kb
import app.database.requests as rq


@user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    if message.text:
        phone_number = message.text.split(' ')[1] if len(message.text.split(' ')) > 1 else None
    else:
        phone_number = None

    if phone_number:
        user_role = await rq.get_user_role(message.from_user.id)
        if not user_role or user_role not in ["–†–∞–±–æ—Ç–Ω–∏–∫", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]:
            pass
        else:
            qr = await rq.check_qr_code(phone_number)
            if not qr:
                await message.answer("‚õî <b>QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</b>\n–ò—Å—Ç—ë–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è üòî", parse_mode="HTML")
                return

            await handle_phone_selection_by_qr(message, phone_number, state)
            return

    if await rq.check_user_by_id(message.from_user.id):
        text = (
            "<b>–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!</b>\n\n"
            "<b>–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —à–∏–Ω–æ–º–∞—Ä—Ç–µ</b> üöóüí®\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞.\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
        )
        reply_markup = kb.main_menu
    else:
        text = (
            "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
            "<b>–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —à–∏–Ω–æ–º–∞—Ä—Ç–µ</b> üöóüí®\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä—É—Ç—ã–µ —Å–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ üéâ\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî —ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç ‚è≥"
        )
        reply_markup = kb.registration

    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )


@user_router.callback_query(F.data == 'main_menu')
async def main_menu(callback: CallbackQuery):
    await callback.answer("")
    await callback.message.edit_text(
        text="<b>–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!</b>\n\n"
            "<b>–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —à–∏–Ω–æ–º–∞—Ä—Ç–µ</b> üöóüí®\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞.\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        parse_mode="HTML", reply_markup=kb.main_menu
    )


@user_router.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery):
    await callback.answer("")
    user_id = callback.from_user.id
    profile_data = await rq.get_user_profile(user_id)

    if profile_data:
        registration_date = profile_data['registration_date'].replace("-", ".")

        profile_message = (
            f"<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
            f"<b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</b>\n\n"
            f"<b>üÜî –í–∞—à ID:</b> <code>{profile_data['user_id']}</code>\n\n"
            f"<b>üëã –ò–º—è:</b> {profile_data['name']}\n\n"
            f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registration_date}\n\n"
            f"<b>üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {profile_data['mobile_phone']}\n\n"
            f"<b>üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {profile_data['bonus_balance']} –±–æ–Ω—É—Å–æ–≤\n\n"
            f"<b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</b>\n\n"
            "<i>–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∏–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</i>"
        )
    else:
        profile_message = (
            "<b>‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "<i>üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–º–æ—â–∏ üìû.</i>"
        )

    await callback.message.edit_text(profile_message, parse_mode="HTML", reply_markup=kb.profile)


@user_router.callback_query(F.data == 'history_purchase')
async def history_purchase(callback: CallbackQuery):
    await callback.answer("")
    user_id = callback.from_user.id

    transactions = await rq.get_last_10_transactions(user_id)

    if not transactions:
        await callback.message.answer("üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞. \n–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑! üòä",
                                      reply_markup=kb.delete_button_user)
        return

    history_message = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–∫—É–ø–æ–∫/—Å–ø–∏—Å–∞–Ω–∏–π:</b>\n\n"

    for transaction in transactions:
        transaction_date = transaction.transaction_date.strftime("%d.%m.%Y %H:%M")
        transaction_type = transaction.transaction_type
        amount = f"{transaction.amount:.2f} —Ä—É–±."

        bonus_text = (
            f"–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {transaction.bonus_amount}"
            if transaction_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
            else f"–°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {transaction.bonus_amount}"
        )

        history_message += (
            f"üìÖ <b>–î–∞—Ç–∞:</b> {transaction_date}\n"
            f"<b>–¢–∏–ø:</b> {transaction_type}\n"
            f"<b>–°—É–º–º–∞:</b> {amount}\n"
            f"<b>{bonus_text}</b>\n"
            f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        )

    await callback.message.answer(history_message, parse_mode="HTML", reply_markup=kb.delete_button_user)


@user_router.callback_query(F.data == "delete_button_user")
async def delete_history_message(callback: CallbackQuery):
    await callback.answer()

    await callback.message.delete()


@user_router.callback_query(F.data == "contact")
async def contact_us(callback: CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏:\n"
        f"{PHONE_NUMBER}",
        parse_mode='HTML',
        reply_markup=kb.back_to_main_menu
    )