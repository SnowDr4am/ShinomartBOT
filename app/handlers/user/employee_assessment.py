from aiogram import F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.handlers.main import user_router
import app.keyboards.user.user as kb
import app.database.requests as rq


class ReviewState(StatesGroup):
    waiting_for_rating = State()
    waiting_for_comment_choice = State()
    waiting_for_comment = State()


@user_router.callback_query(F.data == "start_assessment")
async def start_assessment(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = str(callback.from_user.id)
    last_transaction = await rq.get_last_transaction(user_id)

    if not last_transaction:
        await callback.message.answer(
            "<b>‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏</b>",
            parse_mode="HTML"
        )
        return

    if await rq.check_review_exists(last_transaction.id):
        await callback.message.answer(
            "<b>‚úÖ –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é</b>",
            parse_mode="HTML"
        )
        return

    await callback.message.answer(
        "<b>üåü –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–∞—Å—Ç–µ—Ä–∞</b>\n–ü–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:",
        reply_markup=kb.rating,
        parse_mode="HTML"
    )
    await state.update_data(last_transaction=last_transaction)
    await state.set_state(ReviewState.waiting_for_rating)


@user_router.callback_query(F.data.startswith("rate_"), ReviewState.waiting_for_rating)
async def process_rating(callback: CallbackQuery, state: FSMContext):
    rating_value = int(callback.data.split("_")[1])
    await state.update_data(rating=rating_value)
    await callback.message.edit_text(
        f"<b>‚≠ê –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {rating_value}</b>\n–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
        reply_markup=kb.comment_choice,
        parse_mode="HTML"
    )
    await state.set_state(ReviewState.waiting_for_comment_choice)
    await callback.answer()


@user_router.callback_query(F.data.startswith("comment_"), ReviewState.waiting_for_comment_choice)
async def process_comment_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")[1]

    if choice == "no":
        data = await state.get_data()
        last_transaction = data["last_transaction"]
        await rq.save_review(
            user_id=str(callback.from_user.id),
            purchase_id=last_transaction.id,
            worker_id=last_transaction.worker_id,
            rating=data["rating"],
            comment=None
        )
        await callback.message.edit_text(
            "<b>üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!</b>",
            parse_mode="HTML"
        )
        await state.clear()
    elif choice == "yes":
        await callback.message.edit_text(
            "<b>‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )
        await state.set_state(ReviewState.waiting_for_comment)
    await callback.answer()


@user_router.message(ReviewState.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    data = await state.get_data()
    last_transaction = data["last_transaction"]

    if comment.lower() == "–æ—Ç–º–µ–Ω–∞":
        await rq.save_review(
            user_id=str(message.from_user.id),
            purchase_id=last_transaction.id,
            worker_id=last_transaction.worker_id,
            rating=data["rating"],
            comment=None
        )
        await message.answer(
            "<b>‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–º–µ–Ω—ë–Ω</b>\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! üôå",
            parse_mode="HTML"
        )
    else:
        await rq.save_review(
            user_id=str(message.from_user.id),
            purchase_id=last_transaction.id,
            worker_id=last_transaction.worker_id,
            rating=data["rating"],
            comment=comment
        )
        await message.answer(
            "<b>üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>",
            parse_mode="HTML"
        )
    await state.clear()