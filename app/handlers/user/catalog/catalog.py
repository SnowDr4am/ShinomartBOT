from aiogram import F
from aiogram.fsm.context import FSMContext

from aiogram.types import CallbackQuery
from app.handlers.main import user_router
import app.database.ItemService as ItemService
import app.database.requests as rq
import app.keyboards.user.catalog as catalog_kb
from aiogram.utils.media_group import MediaGroupBuilder

from .utils import *


@user_router.callback_query(F.data.startswith("catalog:"))
async def view_catalog(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    category, type_id = await get_category(int(callback.data.split(":")[1]))

    category_data = await ItemService.get_all_categories_with_active_items(type_id)
    await state.update_data(category=category, type_id=type_id)

    keyboard = await catalog_kb.get_catalog_keyboard(category_data, type_id)

    await callback.message.edit_text(
        f"<b>üîç {category} ‚Äî –í—ã–±–æ—Ä –ø–æ –¥–∏–∞–º–µ—Ç—Ä—É</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏.\n\n"
        f"üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–∏–∞–º–µ—Ç—Ä –Ω–∏–∂–µ:",
        parse_mode='HTML',
        reply_markup=keyboard
    )


@user_router.callback_query(F.data.startswith("category:"))
async def handle_category_by_id(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    parts = callback.data.split(":")
    category_id = int(parts[1])
    page = 1
    if len(parts) == 4 and parts[2] == "page":
        page = int(parts[3])

    items = await ItemService.get_items_by_category(category_id, "active")
    data = await state.get_data()
    category = data.get("category")
    type_id = data.get("type_id")

    keyboard = await catalog_kb.get_item_keyboard(items, category_id, type_id, page=page)

    await callback.message.edit_text(
        text=(
            f"<b>üîç {category} ‚Äî –í—ã–±–æ—Ä –ø–æ –±—Ä–µ–Ω–¥—É</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç\n\n"
            f"üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±—Ä–µ–Ω–¥ –Ω–∏–∂–µ:"
        ),
        parse_mode='HTML',
        reply_markup=keyboard
    )


@user_router.callback_query(F.data.startswith("item:"))
async def show_item_card(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    item_id = int(callback.data.split(":")[1])

    item = await ItemService.get_item_by_id(item_id)
    if not item:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    price = item.meta_data.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    description = item.meta_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    photos = item.meta_data.get("photos", [])
    season = item.meta_data.get("season")
    params = item.meta_data.get("params", "–ù–µ —É–∫–∞–∑–∞–Ω—ã")
    amount = item.meta_data.get("amount", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    season_emoji = {
        "summer": "‚òÄÔ∏è",
        "winter": "‚ùÑÔ∏è",
        "allseason": "üå¶Ô∏è"
    }.get(season, "")

    caption = (
        f"<b>{season_emoji} {item.value}</b>\n\n"
        f"üîß <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b> {params}\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description or '‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {amount} —à—Ç.\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n\n"
        f"üìç <b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º ‚Äî –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!</b>\n"
        f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –≤ –º–µ–Ω—é"
    )

    media = MediaGroupBuilder()
    for i, photo_id in enumerate(photos):
        if i == 0:
            media.add_photo(media=photo_id, caption=caption, parse_mode='HTML')
        else:
            media.add_photo(media=photo_id)
    await callback.message.answer_media_group(media.build())

    user = await rq.get_user_by_tg_id(callback.from_user.id)
    user_role = user.role if user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if user_role != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
        keyboard = await catalog_kb.employee_item_card_keyboard(item_id)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@user_router.callback_query(F.data == "ignore")
async def ignore_handler(callback: CallbackQuery):
    await callback.answer()
