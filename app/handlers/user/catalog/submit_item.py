from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.utils.media_group import MediaGroupBuilder

from app.servers.config import TIRES_AND_DISCS_CHANNEL
from app.handlers.main import user_router, admin_router
import app.database.ItemService as ItemService
import app.database.requests as rq
import app.keyboards.user.catalog as catalog_kb
from app.utils.states import SubmitItemStates
from app.handlers.user.user import main_menu

from .utils import *


@user_router.callback_query(F.data.startswith("submit_item"))
async def start_submit_new_item(callback: CallbackQuery):
    await callback.answer()

    type_id = int(callback.data.split(":")[1])
    category_name, _ = await get_category(type_id)

    categories = await ItemService.get_all_categories(type_id)

    keyboard = await catalog_kb.get_submit_radius_keyboard(categories, type_id)

    await callback.message.edit_text(
        f"üì¢ –í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@user_router.callback_query(F.data.startswith("submit_radius:"))
async def submit_radius_chosen(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    type_id = int(callback.data.split(":")[1])
    category_id = int(callback.data.split(":")[2])

    await state.update_data(category_id=category_id, type_id=type_id)

    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ",
        parse_mode='HTML'
    )

    await state.set_state(SubmitItemStates.waiting_brand)


@user_router.message(SubmitItemStates.waiting_brand)
async def process_brand(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    await state.update_data(brand=message.text.strip())

    await message.answer(
        "üõ† –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–µ–¥–æ—á–µ—Ç–æ–≤\n"
        "–í–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
    )
    await state.set_state(SubmitItemStates.waiting_description)


@user_router.message(SubmitItemStates.waiting_description)
async def process_description(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if not text:
        await message.answer("‚ö†Ô∏è –û–ø–∏—à–∏—Ç–µ –Ω–µ–¥–æ—á—ë—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç', –ª–∏–±–æ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    await state.update_data(description=message.text.strip())

    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–æ–º–ø–ª–µ–∫—Ç (—á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö)\n"
        "–í–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
    )
    await state.set_state(SubmitItemStates.waiting_price)


@user_router.message(SubmitItemStates.waiting_price)
async def process_price(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if not text.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    await state.update_data(price=int(text))

    await message.answer(
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
        parse_mode='HTML',
        reply_markup=catalog_kb.success_upload_picture
    )
    await state.update_data(photos=[])
    await state.set_state(SubmitItemStates.waiting_picture)


@user_router.message(SubmitItemStates.waiting_picture)
async def handle_media_group(message: Message, state: FSMContext):
    data = await state.get_data()
    current_photos = data.get("photos", [])

    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if current_photos:
            await message.answer("–§–æ—Ä–º–∏—Ä—É—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...", reply_markup=ReplyKeyboardRemove())
            await preview_submission(message, state)
            return

    if not message.photo:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ, –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏.")
        return

    if len(current_photos) >= 10:
        await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        return

    new_photo_id = message.photo[-1].file_id

    current_photos.append(new_photo_id)
    await state.update_data(photos=current_photos)

async def preview_submission(message: Message, state: FSMContext):
    data = await state.get_data()

    category = await ItemService.get_category_by_id(int(data["category_id"]))
    type_label = "–ë/–£ –®–∏–Ω—ã" if data["type_id"] == 1 else "–ë/–£ –î–∏—Å–∫–∏"

    caption = (
        f"<b>üì¶ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
        f"<b>üõ† –¢–∏–ø:</b> {type_label}\n"
        f"<b>üìè –î–∏–∞–º–µ—Ç—Ä:</b> {category.value}\n"
        f"<b>üè∑ –ë—Ä–µ–Ω–¥:</b> {data['brand']}\n"
        f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"<b>üí∞ –¶–µ–Ω–∞:</b> {data['price']} ‚ÇΩ"
    )

    media = MediaGroupBuilder()
    photos = data.get("photos", [])
    for i, photo_id in enumerate(photos):
        if i == 0:
            media.add_photo(media=photo_id, caption=caption, parse_mode='HTML')
        else:
            media.add_photo(media=photo_id)
    keyboard = await catalog_kb.confirm_submission_keyboard()
    await message.answer_media_group(media.build())
    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard
    )


@user_router.callback_query(F.data.startswith('submit_confirm:'))
async def confirm_submission(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    params = callback.data.split(":")[1]
    if params == 'no':
        await state.clear()
        await callback.message.answer(f"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–∞")
        await main_menu(callback, state)
        return

    data = await state.get_data()

    category = await ItemService.get_category_by_id(int(data["category_id"]))
    type_label = "–ë/–£ –®–∏–Ω—ã" if data["type_id"] == 1 else "–ë/–£ –î–∏—Å–∫–∏"

    user = await rq.get_user_by_tg_id(callback.from_user.id)

    caption = (
        f"<b>üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        f"<b>üõ† –¢–∏–ø:</b> {type_label}\n"
        f"<b>üìè –î–∏–∞–º–µ—Ç—Ä:</b> {category.value}\n"
        f"<b>üè∑ –ë—Ä–µ–Ω–¥:</b> {data['brand']}\n"
        f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"<b>üí∞ –¶–µ–Ω–∞:</b> {data['price']} ‚ÇΩ\n\n"
        f"üì± <b>–ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:</b> {user.mobile_phone}"
    )

    media = MediaGroupBuilder()
    for i, photo_id in enumerate(data.get("photos", [])):
        if i == 0:
            media.add_photo(media=photo_id, caption=caption, parse_mode='HTML')
        else:
            media.add_photo(media=photo_id)

    await callback.bot.send_media_group(chat_id=TIRES_AND_DISCS_CHANNEL, media=media.build())

    keyboard = await catalog_kb.admin_review_submission_keyboard(callback.from_user.id)

    await callback.bot.send_message(
        chat_id=TIRES_AND_DISCS_CHANNEL,
        text="üîé –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É:",
        reply_markup=keyboard
    )

    await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –º—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è")
    await state.clear()


@admin_router.callback_query(F.data.startswith("submit_admin_action:"))
async def handle_submit_admin_action(callback: CallbackQuery):
    await callback.answer()

    _, action, user_id_str = callback.data.split(":")
    telegram_user_id = int(user_id_str)

    if action == "yes":
        text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.username} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –∫–ª–∏–µ–Ω—Ç–∞"
        user_message = (
            "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
            "üìç –ñ–¥–µ–º –≤–∞—Å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–æ –∞–¥—Ä–µ—Å—É:\n"
            "–≥. –¢—é–º–µ–Ω—å, —É–ª. –ü—Ä–∞–≤–¥—ã 64–ê (–®–∏–Ω–æ–º–∞—Ä—Ç)"
        )
    elif action == "no":
        text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –∫–ª–∏–µ–Ω—Ç—É"
        user_message = (
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ"
        )
    else:
        await callback.message.edit_reply_markup()
        return

    await callback.message.edit_text(text=text)

    try:
        await callback.bot.send_message(
            chat_id=telegram_user_id,
            text=user_message
        )
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É: {e}")

