from aiogram import F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.handlers.main import user_router, admin_router
import app.keyboards.user.user as kb
import app.database.requests as rq

from config import OWNER

class VotingApproved(StatesGroup):
    waiting_picture = State()
    waiting_comment = State()

@user_router.callback_query(F.data == 'voting_approve')
async def start_voting_approve(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    check_vote_status = await rq.get_user_vote_history(str(callback.from_user.id))
    if check_vote_status:
        await callback.message.answer(
            "üñºÔ∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞</b> –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
            "‚ùå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='HTML'
        )

        await state.set_state(VotingApproved.waiting_picture)
    else:
        await callback.message.delete()
        await callback.message.answer(
            "‚ÑπÔ∏è <b>–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤</b>\n"
            "üîÅ <b>–ü–æ–≤—Ç–æ—Ä–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è</b>",
            parse_mode='HTML'
        )
        return

@user_router.message(VotingApproved.waiting_picture)
async def process_picture(message: Message, state: FSMContext):
    if not message.photo:
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await message.answer(
                "‚ùå <b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é.</b>\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ üòä",
                parse_mode='HTML'
            )
        else:
            await message.answer(
                "üì∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª",
                parse_mode='HTML'
            )
        return

    photo = message.photo[-1]
    admin_chat_id = OWNER
    user_profile = await rq.get_user_profile(message.from_user.id)
    user_link = f"<a href='tg://user?id={message.from_user.id}'>{user_profile['name']}</a>"
    keyboard = await kb.admin_voting_approval_keyboard(message.from_user.id)

    await message.bot.send_photo(
        chat_id=admin_chat_id,
        photo=photo.file_id,
        caption=(
            f"üÜï <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> {user_link}\n"
            "üîç <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ</b>"
        ),
        reply_markup=keyboard,
        parse_mode='HTML'
    )

    await state.clear()
    await message.answer(
        "üïµÔ∏è <b>–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\n"
        "‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ</b>",
        parse_mode='HTML'
    )

@admin_router.callback_query(F.data.startswith("approvedVoting"))
async def process_approved(callback: CallbackQuery):
    await callback.answer()

    _, user_id, confirm = callback.data.split(":")
    await callback.message.delete()

    if confirm == "yes":
        bonus_system = await rq.get_bonus_system_settings()
        await rq.set_bonus_balance(user_id, "add", bonus_system['voting_bonus'], 0, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        await rq.create_voting_history(user_id)
        user_link = f"<a href='tg://user?id={user_id}'> (–ø—Ä–æ—Ñ–∏–ª—å)</a>"

        await callback.message.answer(
            f"üéâ <b>–ë–æ–Ω—É—Å—ã –∑–∞ –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_link}!</b>",
            parse_mode='HTML'
        )

        await callback.bot.send_message(
            chat_id=user_id,
            text=(
                "‚úÖ <b>–í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç!</b>\n"
                f"üí∞ <b>–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_system['voting_bonus']} –±–æ–Ω—É—Å–æ–≤</b>\n\n"
                "üôè <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>"
            ),
            parse_mode='HTML'
        )
    elif confirm == 'no':
        keyboard = await kb.admin_voting_comment(user_id)
        await callback.message.answer(
            "‚ùå <b>–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞ –∑–∞ –æ—Ç–∑—ã–≤</b>\n"
            "üìù <b>–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )


@admin_router.callback_query(F.data.startswith("commentVoting"))
async def proccess_choice_comment(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    _, user_id, choice = callback.data.split(":")
    await callback.message.delete()
    if choice == 'yes':
        await callback.message.answer(
            "üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n"
            "üì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
            "‚ùå –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='HTML'
        )
        await state.update_data(user_id=user_id)
        await state.set_state(VotingApproved.waiting_comment)
    else:
        await state.clear()
        user_link = f"<a href='tg://user?id={user_id}'> (–ø—Ä–æ—Ñ–∏–ª—å)</a>"
        await callback.message.answer(
            f"‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_link} –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –æ—Ç–∑—ã–≤ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω</b>",
            parse_mode='HTML'
        )
        await callback.bot.send_message(
            chat_id=user_id,
            text=(
                "‚ùå <b>–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –æ—Ç–∑—ã–≤</b> –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω"
            ),
            parse_mode='HTML'
        )


@admin_router.message(VotingApproved.waiting_comment)
async def process_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    data = await state.get_data()
    await state.clear()
    user_id = data["user_id"]
    user_link = f"<a href='tg://user?id={user_id}'> (–ø—Ä–æ—Ñ–∏–ª—å)</a>"

    if comment.lower() == '–æ—Ç–º–µ–Ω–∞':
        await message.answer(
            f"‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_link} –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –æ—Ç–∑—ã–≤ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω</b>",
            parse_mode='HTML'
        )

        await message.bot.send_message(
            chat_id=data["user_id"],
            text=(
                "‚ùå <b>–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –æ—Ç–∑—ã–≤</b> –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω"
            ),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_link} –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –æ—Ç–∑—ã–≤</b>\n"
            f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}",
            parse_mode='HTML'
        )

        await message.bot.send_message(
            chat_id=data["user_id"],
            text=(
                "‚ùå <b>–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –æ—Ç–∑—ã–≤</b>\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}"
            ),
            parse_mode='HTML'
        )