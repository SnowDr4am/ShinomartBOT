from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from app.handlers.main import user_router, admin_router
from app.handlers.user.user import cmd_start
import app.keyboards.user.user as kb
import app.database.requests as rq

from app.servers.config import OWNER

class FeedbackState(StatesGroup):
    waiting_answer = State()

class FeedbackAnswerState(StatesGroup):
    waiting_answer = State()

@user_router.callback_query(F.data.startswith("handleFeedback"))
async def handle_feedback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    choice = callback.data.split(":")[1]
    await state.update_data(choice=choice)
    if choice == "complain":
        await callback.message.answer(
            "<b>–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å üòî, —á—Ç–æ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É üõ†Ô∏è\n\n"
            "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='HTML'
        )
    else:
        await callback.message.answer(
            "<b>–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ –Ω–∞–º? üí°</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ –µ—ë –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—Å—ë –ø—Ä–æ—á–∏—Ç–∞–µ–º!\n\n"
            "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode='HTML'
        )
    await state.set_state(FeedbackState.waiting_answer)

@user_router.message(FeedbackState.waiting_answer)
async def process_feedback(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await cmd_start(message, state)
        return

    admin_chat_id = OWNER
    user_profile = await rq.get_user_profile(message.from_user.id)
    user_link = f"<a href='tg://user?id={message.from_user.id}'>{user_profile['name']}</a>"
    mobile_phone = user_profile['mobile_phone']
    keyboard = await kb.admin_feedback_answer(message.from_user.id)
    data = await state.get_data()
    await state.clear()

    if data.get("choice") == "complain":
        caption = "üî¥ <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞</b>"
    else:
        caption = "üí° <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>"

    await message.bot.send_message(
        chat_id=admin_chat_id,
        text=(
            f"{caption}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"<b>–û—Ç –∫–æ–≥–æ:</b>\n"
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å: </b> {user_link}\n"
            f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: </b> {mobile_phone}\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b>\n"
            f"{message.text.strip()}"
        ),
        parse_mode='HTML',
        reply_markup=keyboard
    )

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    await cmd_start(message, state)

@admin_router.callback_query(F.data.startswith("handleAdminAnswerFeedback"))
async def start_admin_answer_feedback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    user_id=callback.data.split(":")[1]
    await callback.message.answer(
        "<b>‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ</b>\n\n"
        "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='HTML'
    )

    await state.update_data(user_id=user_id)
    await state.set_state(FeedbackAnswerState.waiting_answer)

@admin_router.message(FeedbackAnswerState.waiting_answer)
async def handle_admin_answer_feedback(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await cmd_start(message, state)
        return

    data = await state.get_data()
    user_id = data.get("user_id")
    await state.clear()

    await message.bot.send_message(
        user_id,
        "<b>üì© –ü—Ä–∏–≤–µ—Ç!</b>\n"
        "–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –≤–æ—Ç –Ω–∞—à –æ—Ç–≤–µ—Ç:\n\n"
        f"{message.text.strip()}",
        parse_mode='HTML'
    )

    await message.answer(
        "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n"
        "–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üóëÔ∏è"
    )