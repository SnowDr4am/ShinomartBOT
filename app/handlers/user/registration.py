from aiogram import F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from datetime import datetime
import re

from app.handlers.user.user import cmd_start
from app.handlers.main import user_router
import app.keyboards.user.user as kb
import app.database.requests as rq


class GetUserInfo(StatesGroup):
    name = State()
    mobile_phone = State()


@user_router.callback_query(F.data == 'registration')
async def registration(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await callback.message.edit_text(
        "üìù <b>–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –æ –í–∞—Å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n"
        "‚Äî üë§ <b>–í–∞—à–µ –∏–º—è</b>\n"
        "‚Äî üìû <b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n",
        parse_mode="HTML"
    )
    await callback.message.answer(
        "üñäÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–µ –∏–º—è</b>",
        parse_mode='HTML'
    )
    await state.set_state(GetUserInfo.name)

@user_router.message(GetUserInfo.name)
async def get_name(message: Message, state: FSMContext):
    user_input = message.text

    await state.update_data(name=user_input)

    await message.answer(
        "üì± <b>–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>",
        parse_mode='HTML',
        reply_markup=kb.get_phone_number
    )

    await state.set_state(GetUserInfo.mobile_phone)

@user_router.message(GetUserInfo.mobile_phone)
async def get_mobile_phone(message: Message, state: FSMContext):
    try:
        if message.contact is not None:
            phone_number = message.contact.phone_number
            cleaned_number = re.sub(r'\D', '', phone_number)
        else:
            user_input = message.text
            if not user_input:
                await message.answer(
                    "‚ö†Ô∏è <b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b>",
                        parse_mode='HTML'
                )
                return

            cleaned_number = re.sub(r'\D', '', user_input)

        if not cleaned_number or cleaned_number[0] not in ('7', '8'):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.</b> –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7 –∏–ª–∏ 8.",
                parse_mode='HTML'
            )

            return

        if cleaned_number[0] == '7':
            cleaned_number = '8' + cleaned_number[1:]

        if len(cleaned_number) != 11:
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞.</b> –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä",
                parse_mode='HTML'
            )
            return

        if await rq.check_mobile_phone(cleaned_number):
            await message.answer(
                "üö´ <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.</b>",
                parse_mode='HTML'
            )
            return

        await state.update_data(mobile_phone=cleaned_number)

        data = await state.get_data()
        name = data.get("name")
        number = data.get("mobile_phone")

        if await rq.set_user(message.from_user.id, datetime.now(), name, number, datetime.now()):
            await message.answer(
                f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n"
                f"üë§ <b>–ò–º—è:</b> {name}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {number}\n",
                parse_mode='HTML'
            )

            await state.clear()

            await cmd_start(message)
        else:
            await message.answer("üö® <b>–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='HTML')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
            parse_mode='HTML'
        )