import logging
from aiogram import F, Bot
from aiogram.types import CallbackQuery
from app.handlers.main import ai_router
import app.database.requests as rq
from app.servers.config import CHANNEL_ID_DAILY
from datetime import datetime
import pytz

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª bot.log
        logging.StreamHandler()          # –ò –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)
EKATERINBURG_TZ = pytz.timezone('Asia/Yekaterinburg')

@ai_router.callback_query(F.data.startswith("approved:"))
async def process_appointment_response(callback: CallbackQuery, bot: Bot):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞: {callback.data}")
    parts = callback.data.split(":")
    if len(parts) != 3:
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.data")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    _, user_id, action = parts
    logger.info(f"User_id: {user_id}, Action: {action}")

    if action == "yes":
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è user_id: {user_id}")
        if await rq.confirm_appointment(user_id):
            await callback.message.edit_text(
                "‚úÖ <b>–°–ø–∞—Å–∏–±–æ!</b> –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. üéâ\n\n"
                "‚è∞ <b>–ú—ã –∂–¥—ë–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!</b>",
                parse_mode='HTML',
                reply_markup=None
            )
            logger.info(f"–ó–∞–ø–∏—Å—å –¥–ª—è user_id: {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòï\n\n"
                "‚ÑπÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</b>",
                parse_mode='HTML',
                reply_markup=None
            )
            logger.warning(f"–ó–∞–ø–∏—Å—å –¥–ª—è user_id: {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")

    elif action == "remove":
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è user_id: {user_id}")
        if await rq.delete_appointment(user_id):
            await callback.message.edit_text(
                "‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n\n"
                "‚ÑπÔ∏è <b>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.</b>",
                parse_mode='HTML',
                reply_markup=None
            )
            logger.info(f"–ó–∞–ø–∏—Å—å –¥–ª—è user_id: {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòï\n\n"
                "‚ÑπÔ∏è <b>–í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>",
                parse_mode='HTML',
                reply_markup=None
            )
            logger.warning(f"–ó–∞–ø–∏—Å—å –¥–ª—è user_id: {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        await callback.answer(
            "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ü§î\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            show_alert=True
        )
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ")
    try:
        await update_channel_message(bot)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {e}")
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ –∫–∞–Ω–∞–ª–µ:</b> {str(e)}",
            parse_mode="HTML",
            reply_markup=None
        )

    await callback.answer()


async def update_channel_message(bot: Bot):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ")
    today = datetime.now(EKATERINBURG_TZ)
    logger.info(f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today.strftime('%d.%m.%Y')}")

    appointments = await rq.get_appointments_for_today()
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(appointments)}")

    if not appointments:
        message = (
            f"üìÖ <b>–ó–∞–ø–∏—Å—å –≤ —Å–µ—Ä–≤–∏—Å –Ω–∞ {today.strftime('%d.%m.%Y')} (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)</b>\n\n"
            "–ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π"
        )
    else:
        message_lines = [f"üìÖ <b>–ó–∞–ø–∏—Å—å –≤ —Å–µ—Ä–≤–∏—Å –Ω–∞ {today.strftime('%d.%m.%Y')} (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)</b>\n"]
        for appt in appointments:
            user = await rq.get_user_profile(appt.user_id)
            name = user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') if user else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if appt.is_confirmed else "‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            message_lines.append(
                "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                f"<b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {name}\n"
                f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{appt.mobile_phone}</code>\n"
                f"<b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {appt.date_time.strftime('%H:%M')}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            )
        message = "\n".join(message_lines) + "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"

    logger.info(f"–î–ª–∏–Ω–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
    daily_message_id = await rq.get_daily_message_id()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω daily_message_id: {daily_message_id}")

    if daily_message_id:
        try:
            if len(message) > 4096:
                logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º")
                message = message[:4090] + "\n...\n(–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ Telegram)"
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {daily_message_id} –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID_DAILY}")
            await bot.edit_message_text(
                chat_id=CHANNEL_ID_DAILY,
                message_id=daily_message_id,
                text=message,
                parse_mode="HTML"
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {e}")
            raise
    else:
        logger.warning("daily_message_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        try:
            msg = await bot.send_message(
                chat_id=CHANNEL_ID_DAILY,
                text=message,
                parse_mode="HTML"
            )
            await rq.set_daily_message_id(msg.message_id)
            logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {msg.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise