from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.utils.media_group import MediaGroupBuilder

from app.handlers.main import user_router, admin_router, employee_router
import app.database.ItemService as ItemService
import app.database.requests as rq
import app.keyboards.employee.catalog as catalog_kb
from app.utils.states import CreateItemStates
from app.handlers.user.user import main_menu

from app.handlers.user.catalog.utils import get_category


@employee_router.message(F.text=='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ë/–£ —Ä–µ–∑–∏–Ω—É –∏–ª–∏ –¥–∏—Å–∫–∏')
async def start_create_new_item(message: Message):
    await message.answer(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=catalog_kb.employee_item_type_view
    )


@employee_router.callback_query(F.data.startswith("create_item:"))
async def create_type_id_chosen(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    arg = callback.data.split(":")[1]
    category_name, type_id = await get_category(arg)

    await state.update_data(category_name=category_name, type_id=type_id)

    categories = await ItemService.get_all_categories(type_id)
    keyboard = await catalog_kb.get_create_radius_keyboard(categories, type_id)

    await callback.message.edit_text(
        f"üìç <b>–¢–∏–ø:</b> {category_name}\n\n"
        f"üîò –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–∏–∞–º–µ—Ç—Ä</b> –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        parse_mode='HTML',
        reply_markup=keyboard
    )


@user_router.callback_query(F.data.startswith("create_radius:"))
async def submit_radius_chosen(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    type_id = int(callback.data.split(":")[1])
    category_id = int(callback.data.split(":")[2])
    await state.update_data(category_id=category_id)

    data = await state.get_data()
    category_name = data["category_name"]

    if type_id == 1:
        await callback.message.edit_text(
            f"‚ùÑÔ∏è <b>{category_name}</b> ‚Äî —É–∫–∞–∂–∏—Ç–µ —Å–µ–∑–æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ üëá",
            parse_mode='HTML',
            reply_markup=catalog_kb.employee_season_view
        )
    else:
        await callback.message.edit_text(
            "üè∑ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞</b>\n\n"
            "üõë –ù–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ.",
            parse_mode='HTML'
        )
        await state.set_state(CreateItemStates.waiting_brand)

@employee_router.callback_query(F.data.startswith("create_item_season:"))
async def handle_tires_season(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    season = callback.data.split(":")[1]
    await state.update_data(season=season)

    await callback.message.edit_text(
        "üè∑ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞</b>\n\n"
        "üõë –ù–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ.",
        parse_mode='HTML'
    )
    await state.set_state(CreateItemStates.waiting_brand)


@employee_router.message(CreateItemStates.waiting_brand)
async def process_brand(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
        return

    await state.update_data(brand=text)
    await message.answer(
        "üõ† –û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ / –∏–∑–Ω–æ—Å / –¥–µ—Ñ–µ–∫—Ç—ã\n"
        "–í–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è."
    )
    await state.set_state(CreateItemStates.waiting_description)


@employee_router.message(CreateItemStates.waiting_description)
async def process_description(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
        return

    await state.update_data(description=text)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∑–∞ 1 —à—Ç. (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n"
        "–ü—Ä–∏–º–µ—Ä: <code>4500</code>",
        parse_mode='HTML'
    )
    await state.set_state(CreateItemStates.waiting_price)


@employee_router.message(CreateItemStates.waiting_price)
async def process_price(message: Message, state: FSMContext):
    text = message.text.strip()

    if not text.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ ‚Äî —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö.")
        return

    await state.update_data(price=int(text))
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ.\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b>.",
        reply_markup=catalog_kb.success_upload_picture,
        parse_mode='HTML'
    )
    await state.update_data(photos=[])
    await state.set_state(CreateItemStates.waiting_picture)


@employee_router.message(CreateItemStates.waiting_picture)
async def handle_photos(message: Message, state: FSMContext):
    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...", reply_markup=ReplyKeyboardRemove())
        await preview_create_employee(message, state)
        return

    if not message.photo:
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ.")
        return

    data = await state.get_data()
    current_photos = data.get("photos", [])

    if len(current_photos) >= 10:
        await message.answer("üìõ –í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ.")
        return

    file_id = message.photo[-1].file_id
    current_photos.append(file_id)

    await state.update_data(photos=current_photos)


async def preview_create_employee(message: Message, state: FSMContext):
    data = await state.get_data()

    category = await ItemService.get_category_by_id(int(data["category_id"]))
    type_label = "–ë/–£ –†–µ–∑–∏–Ω–∞" if data["type_id"] == 1 else "–ë/–£ –î–∏—Å–∫–∏"

    caption = (
        f"<b>üÜï –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
        f"<b>üõ† –¢–∏–ø:</b> {type_label}\n"
        f"<b>üìè –î–∏–∞–º–µ—Ç—Ä:</b> {category.value}\n"
    )

    if data["type_id"] == 1 and "season" in data:
        emoji = "‚òÄÔ∏è" if data["season"] == "summer" else "‚ùÑÔ∏è"
        caption += f"<b>üóì –°–µ–∑–æ–Ω:</b> {emoji} { '–õ–µ—Ç–æ' if data['season'] == 'summer' else '–ó–∏–º–∞' }\n"

    caption += (
        f"<b>üè∑ –ë—Ä–µ–Ω–¥:</b> {data['brand']}\n"
        f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"<b>üí∞ –¶–µ–Ω–∞:</b> {data['price']} ‚ÇΩ"
    )

    photos = data.get("photos", [])
    media = MediaGroupBuilder()

    for i, photo_id in enumerate(photos):
        if i == 0:
            media.add_photo(media=photo_id, caption=caption, parse_mode='HTML')
        else:
            media.add_photo(media=photo_id)

    keyboard = await catalog_kb.confirm_employee_submission_keyboard()

    await message.answer_media_group(media.build())
    await message.answer("üîç –í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=keyboard)


@employee_router.callback_query(F.data.startswith('create_confirm:'))
async def confirm_employee_create(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    action = callback.data.split(":")[1]
    if action == "no":
        await state.clear()
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    data = await state.get_data()

    await ItemService.create_item_from_employee(
        category_id=data["category_id"],
        brand=data["brand"],
        description=data["description"],
        price=data["price"],
        photos=data["photos"],
        season=data.get("season")
    )

    await state.clear()
    await callback.message.edit_text("‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
