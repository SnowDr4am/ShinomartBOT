from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State

from app.handlers.main import employee_router
from app.handlers.user.sched_handlers import update_channel_message
import app.keyboards.employee.employee as kb
import app.database.requests as rq
import app.database.ai_requests as ai_rq


class GetUserPhone(StatesGroup):
    mobile_phone = State()


@employee_router.message(F.text == 'üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def remove_appointment_client(message: Message, state: FSMContext):
    try:
        await message.answer(
            "üÜï <b>–í—ã –≤—ã–±—Ä–∞–ª–∏: –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç—É</b>\n\n"
            "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –∫–ª–∏–µ–Ω—Ç–∞:\n"
            "‚ÑπÔ∏è <i>–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ</i> <b>'–æ—Ç–º–µ–Ω–∞'</b>",
            parse_mode='HTML'
        )
        await state.set_state(GetUserPhone.mobile_phone)
    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        print(f"–û—à–∏–±–∫–∞ –≤ remove_appointment_client: {e}")


@employee_router.message(GetUserPhone.mobile_phone)
async def send_phone_numbers(message: Message, state: FSMContext):
    user_input = message.text.strip()

    if "–æ—Ç–º–µ–Ω–∞" in user_input.lower():
        await state.clear()
        await message.answer(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b> üîÑ\n\n"
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            parse_mode='HTML'
        )
        return

    if not user_input.isdigit() or len(user_input) != 4:
        await message.answer(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!</b> üö´\n\n"
            "üî¢ –í–≤–µ–¥–∏—Ç–µ <u>—Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã</u> (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞).\n"
            "–ü—Ä–∏–º–µ—Ä: <b>1234</b>",
            parse_mode='HTML'
        )
        return

    try:
        phone_numbers = await rq.get_phone_numbers_by_suffix(user_input)
        if not phone_numbers:
            await message.answer(
                "‚ùå <b>–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!</b> üîç\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
                parse_mode='HTML'
            )
            return

        keyboard = await kb.generate_phone_numbers_appointment(phone_numbers)
        await message.answer(
            "üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
            "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        print(f"–û—à–∏–±–∫–∞ –≤ send_phone_numbers: {e}")


@employee_router.callback_query(F.data.startswith("appointment_phone"))
async def handle_phone_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    phone_number = callback.data.split(":")[1]

    try:
        user_data = await rq.get_user_by_phone(phone_number)
        if user_data:
            appointment = await ai_rq.get_active_appointment(user_data.user_id)
            appointment_info = (
                f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {appointment.date_time.strftime('%H:%M %d.%m.%Y')}\n"
                f"üõ†Ô∏è <b>–£—Å–ª—É–≥–∞:</b> {appointment.service.split('. –¢–∏–ø –º–∞—à–∏–Ω—ã')[0]}"
            ) if appointment else "‚è∞ <b>–ó–∞–ø–∏—Å—å:</b> –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

            user_info_message = (
                "üìã <b>–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {user_data.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìû <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {user_data.mobile_phone}\n"
                f"üí∞ <b>–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {user_data.bonus_balance.balance if user_data.bonus_balance else 0} –±–æ–Ω—É—Å–æ–≤\n\n"
                f"<b>üìã –ó–∞–ø–∏—Å—å –≤ —Å–µ—Ä–≤–∏—Å:</b>\n"
                f"{appointment_info}\n\n"
                "üîç <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
            )
            keyboard = await kb.approved_remove_appointment_keyboard(user_data.user_id)
            await callback.message.edit_text(user_info_message, parse_mode='HTML', reply_markup=keyboard)
            await state.clear()
        else:
            await callback.message.edit_text(
                "‚ùå <b>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!</b> üòï\n\n"
                "–ü—Ä–æ—Ñ–∏–ª—å —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.",
                parse_mode='HTML'
            )
    except Exception as e:
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        print(f"–û—à–∏–±–∫–∞ –≤ handle_phone_selection: {e}")


@employee_router.callback_query(F.data.startswith("remove_appointment_approved"))
async def handle_remove_appointment(callback: CallbackQuery):
    await callback.answer()
    user_id = str(callback.data.split(":")[1])

    try:
        success = await ai_rq.cancel_appointment(user_id)
        if success:
            try:
                await callback.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå <b>–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.\n\n"
                         "‚ÑπÔ∏è –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏! üìû",
                    parse_mode='HTML'
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await callback.message.edit_text(
                "‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!</b> üéâ\n\n"
                f"–ö–ª–∏–µ–Ω—Ç —Å ID {user_id} –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω.",
                parse_mode='HTML'
            )
            await update_channel_message(callback.bot)
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø–∏—Å—å —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                parse_mode='HTML'
            )
    except Exception as e:
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
        print(f"–û—à–∏–±–∫–∞ –≤ handle_remove_appointment: {e}")