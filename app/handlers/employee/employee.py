from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from app.handlers.main import employee_router
import app.keyboards.employee.employee as kb
import app.database.requests as rq


class GetUser(StatesGroup):
    mobile_phone = State()
    select_action = State()
    amount = State()
    bonus_balance = State()
    bonus_deduction = State()
    confirm_deduction = State()



@employee_router.message(Command("job"))
async def cmd_job(message: Message):
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–∞\n"
                         "–í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É",
                         parse_mode='HTML', reply_markup=kb.main_menu)


@employee_router.message(F.text == '–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è')
async def add_bonus(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è'. –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                         "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")
    await state.set_state(GetUser.mobile_phone)


@employee_router.message(GetUser.mobile_phone)
async def send_phone_numbers(message: Message, state: FSMContext):
    user_input = message.text

    if user_input.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    if not user_input.isdigit() or len(user_input) != 4:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return

    phone_numbers = await rq.get_phone_numbers_by_suffix(user_input)

    if not phone_numbers:
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    keyboard = await kb.generate_phone_numbers_keyboard(phone_numbers)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)


@employee_router.callback_query(F.data.startswith("cancel"))
async def handle_phone_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

    await state.clear()


@employee_router.callback_query(F.data.startswith("select_phone"))
async def handle_phone_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    phone_number = callback.data.split(":")[1]

    user_data = await rq.get_user_by_phone(phone_number)

    if user_data:
        user_info_message = (
            "üìã <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {user_data.name}\n"
            f"üìû <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {user_data.mobile_phone}\n"
            f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user_data.birthday_date}\n"
            f"üí∞ <b>–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {user_data.bonus_balance.balance} –±–æ–Ω—É—Å–æ–≤\n"
        )

        await callback.message.answer(user_info_message, parse_mode='HTML')

        await state.update_data(phone_number=phone_number)
        await state.update_data(bonus_balance=user_data.bonus_balance.balance)

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.new_transaction)
        await state.set_state(GetUser.select_action)
    else:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return


@employee_router.callback_query(GetUser.select_action, F.data.startswith("transaction:"))
async def handle_action_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data.split(":")[1]

    if action == 'cancel':
        await state.clear()
        await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    data = await state.get_data()
    phone_number = data.get("phone_number")

    await state.update_data(select_action=action)

    if action == 'add':
        await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}\n"
            f"–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –µ–≥–æ –ø–æ–∫—É–ø–∫–∏"
        )
        await state.set_state(GetUser.amount)
    elif action == 'remove':
        await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}\n"
            f"–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ —Å—É–º–º—É –µ–≥–æ –ø–æ–∫—É–ø–∫–∏"
        )
        await state.set_state(GetUser.amount)


@employee_router.message(GetUser.amount)
async def handle_amount_input(message: Message, state: FSMContext):
    user_input = message.text.strip()

    try:
        amount = float(user_input)

        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except Exception as e:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    data = await state.get_data()
    phone_number = data.get("phone_number")
    action = data.get("select_action")
    bonus_balance = data.get("bonus_balance")
    await state.update_data(amount = amount)

    user_data = await rq.get_user_by_phone(phone_number)

    if not user_data:
        await message.answer('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await state.clear()
        return

    if action == 'add':
        amount_bonus = amount*0.05
        success = await rq.set_bonus_balance(message.from_user.id, "add", amount_bonus, amount, message.from_user.id)
        if success:
            await message.answer(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount_bonus:.2f} –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data.name}")
        else:
            await message.answer(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤")
    elif action == 'remove':
        max_bonus_deduction = amount*0.3
        if bonus_balance <= max_bonus_deduction:
            finally_bonus = bonus_balance
        else:
            finally_bonus = max_bonus_deduction
        await state.update_data(bonus_deduction=finally_bonus)
        await message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ —Å–ø–∏—Å–∞—Ç—å –º–∞–∫—Å–∏–º—É–º {finally_bonus} –±–æ–Ω—É—Å–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=kb.confirm_transaction)
        await state.set_state(GetUser.confirm_deduction)


@employee_router.callback_query(GetUser.confirm_deduction, F.data.startswith("confirm:"))
async def confirm_deduction(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data.split(":")[1]
    data = await state.get_data()
    phone_number = data.get("phone_number")
    bonus_deduction = data.get("bonus_deduction")
    amount = data.get("amount")

    user_data = await rq.get_user_by_phone(phone_number)

    if not user_data:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        await callback.answer()
        return

    if action == 'no':
        amount_bonus = amount * 0.05
        success = await rq.set_bonus_balance(callback.from_user.id, "add", amount_bonus, amount, callback.from_user.id)
        if success:
            await callback.message.answer(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount_bonus:.2f} –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data.name}")
        else:
            await callback.message.answer(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤")
    else:
        success = await rq.set_bonus_balance(callback.from_user.id, "remove", bonus_deduction, amount, callback.from_user.id)
        if success:
            await callback.message.answer(f"–°–ø–∏—Å–∞–Ω–æ {bonus_deduction:.2f} –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.name}\n"
                                          f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {amount-bonus_deduction}")
        else:
            await callback.message.answer(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤")