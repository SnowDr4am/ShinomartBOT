from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.util import await_only

from app.handlers.main import employee_router
import app.keyboards.employee.employee as kb
import app.database.requests as rq


class GetUser(StatesGroup):
    mobile_phone = State()
    select_action = State()
    amount = State()
    bonus_balance = State()
    bonus_deduction = State()
    confirm_deduction = State()
    cashback = State()
    max_debit = State()



@employee_router.message(Command("job"))
async def cmd_employee(message: Message):
    await message.answer(
        "<b>üìã –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–∞!</b>\n\n"
        "<i>üëâ –í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.</i>\n"
        "<u>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.</u>",
        parse_mode='HTML',
        reply_markup=kb.main_menu
    )


@employee_router.callback_query(F.data == "employee_main_menu")
async def callback_employee(callback: CallbackQuery):
    await callback.answer(
        "<b>üìã –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–∞!</b>\n\n"
        "<i>üëâ –í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.</i>\n"
        "<u>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.</u>",
        parse_mode='HTML',
        reply_markup=kb.main_menu
    )


@employee_router.message(F.text == 'üí≥ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è')
async def add_bonus(message: Message, state: FSMContext):
    await message.answer(
        "üÜï <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è'</b> üí∏\n\n"
        "üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "<i>–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ <b>'–æ—Ç–º–µ–Ω–∞'</b></i>",
        parse_mode='HTML'
    )

    await state.set_state(GetUser.mobile_phone)


@employee_router.message(GetUser.mobile_phone)
async def send_phone_numbers(message: Message, state: FSMContext):
    user_input = message.text

    if "–æ—Ç–º–µ–Ω–∞" in user_input.lower():
        await state.clear()
        await message.answer(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b> üîÑ\n\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
            , parse_mode='HTML'
        )
        return

    if not user_input.isdigit() or len(user_input) != 4:
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!</b> üö´\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã</b> –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∏—Ö —Ä–æ–≤–Ω–æ 4."
            , parse_mode='HTML'
        )

        return

    phone_numbers = await rq.get_phone_numbers_by_suffix(user_input)

    if not phone_numbers:
        await message.answer(
            "‚ùå <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b> üîç\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ."
            , parse_mode='HTML'
        )

        return

    keyboard = await kb.generate_phone_numbers_keyboard(phone_numbers)
    await message.answer(
        "üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> \n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        parse_mode='HTML',
        reply_markup=keyboard
    )


@employee_router.callback_query(F.data.startswith("cancel"))
async def handle_phone_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    await callback.message.answer(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        parse_mode='HTML'
    )

    await state.clear()


@employee_router.callback_query(F.data.startswith("select_phone"))
async def handle_phone_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    phone_number = callback.data.split(":")[1]

    user_data = await rq.get_user_by_phone(phone_number)

    if user_data:
        user_info_message = (
            "üìã <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {user_data.name}\n"
            f"üìû <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {user_data.mobile_phone}\n"
            f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user_data.birthday_date}\n"
            f"üí∞ <b>–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {user_data.bonus_balance.balance} –±–æ–Ω—É—Å–æ–≤\n\n"
            "üîç <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.</i>"
        )

        await callback.message.edit_text(user_info_message, parse_mode='HTML', reply_markup=kb.new_transaction)

        await state.update_data(phone_number=phone_number)
        await state.update_data(bonus_balance=user_data.bonus_balance.balance)

        await state.set_state(GetUser.select_action)
    else:
        await callback.message.answer(
            "‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
            parse_mode='HTML'
        )

        return


@employee_router.callback_query(GetUser.select_action, F.data.startswith("transaction:"))
async def handle_action_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data.split(":")[1]

    if action == "cancel":
        await state.clear()
        await callback.message.answer(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b> üîÑ\n\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
            , parse_mode='HTML'
        )
        return

    data = await state.get_data()
    phone_number = data.get("phone_number")

    await state.update_data(select_action=action)

    if action == 'add':
        await callback.message.edit_text(
            f"üí≥ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞:</b> {phone_number}\n"
            "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
            "üîç <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'</i>",
            parse_mode='HTML'
        )
        await state.set_state(GetUser.amount)
    elif action == 'remove':
        await callback.message.edit_text(
            f"‚ùå <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞:</b> {phone_number}\n"
            "üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
            "üîç <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'</i>",
            parse_mode='HTML'
        )

        await state.set_state(GetUser.amount)


@employee_router.message(GetUser.amount)
async def handle_amount_input(message: Message, state: FSMContext):
    user_input = message.text.strip()

    if "–æ—Ç–º–µ–Ω–∞" in user_input.lower():
        await state.clear()
        await message.answer(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b> üîÑ\n\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
            , parse_mode='HTML'
        )
        return

    try:
        amount = float(user_input)

        if amount <= 0:
            await message.answer("‚ö†Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:</b>", parse_mode='HTML')
    except Exception as e:
        await message.answer("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ</b>.", parse_mode='HTML')
        return

    data = await state.get_data()
    phone_number = data.get("phone_number")
    action = data.get("select_action")
    bonus_balance = data.get("bonus_balance")

    current_bonus_settings = await rq.get_bonus_system_settings()
    cashback = current_bonus_settings["cashback"]/100
    max_debit = current_bonus_settings["max_debit"]/100

    await state.update_data(amount=amount, cashback=cashback, max_debit=max_debit)

    user_data = await rq.get_user_by_phone(phone_number)

    if not user_data:
        await message.answer("‚ö†Ô∏è <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode='HTML')
        await state.clear()
        return

    if action == 'add':
        amount_bonus = amount * cashback
        success = await rq.set_bonus_balance(user_data.user_id, "add", amount_bonus, amount, message.from_user.id)
        if success:
            await state.clear()
            await message.answer(
                f"üéâ <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount_bonus:.2f} –±–æ–Ω—É—Å–æ–≤</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data.name} üéÅ",
                parse_mode='HTML',
                reply_markup=kb.main_menu
            )
            await message.bot.send_message(
                chat_id=user_data.user_id,
                text=(
                    f"<b>üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount_bonus:.2f} –±–æ–Ω—É—Å–æ–≤!</b>\n\n"
                    f"üí∞ –ó–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å—É–º–º—É <b>{amount} —Ä—É–±.</b>\n\n"
                    "üî• –≠—Ç–∏ –±–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫—É–ø–æ–∫.\n"
                ),
                reply_markup=kb.assessment,
                parse_mode='HTML'
            )
        else:
            await message.answer(
                "‚ö†Ô∏è <b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤</b> üòû",
                parse_mode='HTML'
            )
    elif action == 'remove':
        max_bonus_deduction = amount * max_debit
        if bonus_balance <= max_bonus_deduction:
            finally_bonus = bonus_balance
        else:
            finally_bonus = max_bonus_deduction
        await state.update_data(bonus_deduction=finally_bonus)
        await message.answer(
            f"üí∏ <b>–í—ã –º–æ–∂–µ—Ç–µ —Å–ø–∏—Å–∞—Ç—å –º–∞–∫—Å–∏–º—É–º {finally_bonus} –±–æ–Ω—É—Å–æ–≤</b> —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=kb.confirm_transaction,
            parse_mode='HTML'
        )
        await state.set_state(GetUser.confirm_deduction)


@employee_router.callback_query(GetUser.confirm_deduction, F.data.startswith("confirm:"))
async def confirm_deduction(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data.split(":")[1]

    if action == "cancel":
        await state.clear()
        await callback.message.answer(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b> üîÑ\n\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
            , parse_mode='HTML'
        )
        return

    data = await state.get_data()
    phone_number = data.get("phone_number")
    bonus_deduction = data.get("bonus_deduction")
    amount = data.get("amount")
    cashback = data.get("cashback")

    user_data = await rq.get_user_by_phone(phone_number)

    if not user_data:
        await callback.message.answer("‚ö†Ô∏è <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode='HTML')
        await state.clear()
        await callback.answer()
        return

    if action == 'no':
        amount_bonus = amount * cashback
        success = await rq.set_bonus_balance(user_data.user_id, "add", amount_bonus, amount, callback.from_user.id)
        if success:
            await callback.message.edit_text(
                f"üéâ <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount_bonus:.2f} –±–æ–Ω—É—Å–æ–≤</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data.name}",
                parse_mode='HTML'
            )
            await callback.bot.send_message(
                chat_id=user_data.user_id,
                text=(
                    f"<b>üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount_bonus:.2f} –±–æ–Ω—É—Å–æ–≤!</b>\n\n"
                    f"üí∞ –ó–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å—É–º–º—É <b>{amount} —Ä—É–±.</b>\n\n"
                    "üî• –≠—Ç–∏ –±–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫—É–ø–æ–∫.\n"
                ),
                reply_markup=kb.assessment,
                parse_mode='HTML'
            )
            await state.clear()

            await callback_employee(callback)
        else:
            await callback.message.answer(
                "‚ùóÔ∏è <b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤</b>.",
                parse_mode='HTML'
            )
    else:
        success = await rq.set_bonus_balance(user_data.user_id, "remove", bonus_deduction, amount, callback.from_user.id)
        if success:
            await callback.message.edit_text(
                f"üí≥ <b>–°–ø–∏—Å–∞–Ω–æ {bonus_deduction:.2f} –±–æ–Ω—É—Å–æ–≤</b> —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.name}\n"
                f"üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {amount - bonus_deduction}",
                parse_mode='HTML'
            )
            await callback.bot.send_message(
                chat_id=user_data.user_id,
                text=(
                    f"<b>‚ùå –£ –≤–∞—Å —Å–ø–∏—Å–∞–Ω–æ {bonus_deduction:.2f} –±–æ–Ω—É—Å–æ–≤!</b>\n\n"
                    f"üí≥ –ó–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å—É–º–º—É <b>{amount} —Ä—É–±.</b>\n\n"
                    "üõçÔ∏è –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!"
                ),
                reply_markup=kb.assessment,
                parse_mode='HTML'
            )
            await state.clear()

            await callback_employee(callback)
        else:
            await callback.message.answer(
                "‚ùóÔ∏è <b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤</b>.",
                parse_mode='HTML'
            )