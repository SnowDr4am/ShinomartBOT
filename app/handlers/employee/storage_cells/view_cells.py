from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from app.handlers.main import employee_router
import app.keyboards.employee.storage_cells.view_cells as kb
import app.keyboards.employee.storage_cells.menu as menu_kb
import app.database.StorageCellsService as storage_service
import app.database.requests as rq


# ==================== –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —è—á–µ–µ–∫ ====================

@employee_router.callback_query(F.data == "storage_open_cells")
async def storage_open_cells(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ —è—á–µ–µ–∫"""
    await callback.answer()
    
    cells = await storage_service.get_cells()
    
    if not cells:
        await callback.message.edit_text(
            "üì¶ <b>–Ø—á–µ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —è—á–µ–π–∫–∏.",
            parse_mode="HTML",
            reply_markup=menu_kb.storage_main_menu
        )
        return

    await state.update_data(current_page=1)
    
    await callback.message.edit_text(
        f"üì¶ <b>–Ø—á–µ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n"
        f"–í—Å–µ–≥–æ —è—á–µ–µ–∫: {len(cells)}\n"
        f"‚úÖ - –∑–∞–Ω—è—Ç–∞—è —è—á–µ–π–∫–∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É:",
        parse_mode="HTML",
        reply_markup=kb.generate_cells_keyboard(cells, page=1)
    )


@employee_router.callback_query(F.data.startswith("storage_page:"))
async def storage_page_navigation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —è—á–µ–µ–∫"""
    await callback.answer()
    
    page = int(callback.data.split(":")[1])
    cells = await storage_service.get_cells()

    await state.update_data(current_page=page)
    
    await callback.message.edit_text(
        f"üì¶ <b>–Ø—á–µ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n"
        f"–í—Å–µ–≥–æ —è—á–µ–µ–∫: {len(cells)}\n"
        f"‚úÖ - –∑–∞–Ω—è—Ç–∞—è —è—á–µ–π–∫–∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É:",
        parse_mode="HTML",
        reply_markup=kb.generate_cells_keyboard(cells, page=page)
    )

# ==================== –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —è—á–µ–π–∫–µ ====================

@employee_router.callback_query(F.data.startswith("storage_cell:"))
async def storage_cell_info(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è—á–µ–π–∫–µ"""
    cell_id = int(callback.data.split(":")[1])
    cell = await storage_service.get_cell(cell_id)
    
    if not cell:
        return await callback.answer("‚ùå –Ø—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç–∞ –ª–∏ —è—á–µ–π–∫–∞
    if cell.cell_storage:
        storage = cell.cell_storage
        # –ö–ª–∏–µ–Ω—Ç
        user_data = await rq.get_user_by_id(storage.user_id)
        user_name = f'<a href="tg://user?id={user_data.user_id}">{user_data.name}</a>'
        user_phone = user_data.mobile_phone

        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫
        worker_data = await rq.get_user_by_id(storage.worker_id)
        worker_name = f'<a href="tg://user?id={worker_data.user_id}">{worker_data.name}</a>'
        worker_phone = worker_data.mobile_phone

        # –î–∞—Ç—ã –∏ —Å—É–º–º—ã
        created_date = storage.created_at.strftime("%d.%m.%Y")
        months_ru = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å",
                     "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
        scheduled_date = f"{months_ru[storage.scheduled_month.month - 1]} {storage.scheduled_month.year}"
        price_str = f"{int(storage.price):,}".replace(",", " ")

        # –¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Üí —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ
        st = str(storage.storage_type).lower()
        human_type = "–®–∏–Ω—ã —Å –¥–∏—Å–∫–∞–º–∏" if ("rim" in st or "–¥–∏—Å–∫" in st or "with" in st) else "–®–∏–Ω—ã"

        text = (
            f"üì¶ <b>–Ø—á–µ–π–∫–∞ ‚Ññ{cell.id}</b>\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ó–∞–Ω—è—Ç–∞\n"
            f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç</b>\n"
            f"‚Ä¢ –ò–º—è: {user_name}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_phone}\n\n"
            f"üßë‚Äçüîß <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</b>\n"
            f"‚Ä¢ –ò–º—è: {worker_name}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {worker_phone}\n\n"
            f"üõû <b>–•—Ä–∞–Ω–µ–Ω–∏–µ</b>\n"
            f"‚Ä¢ –¢–∏–ø: {human_type}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {storage.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {price_str} ‚ÇΩ\n"
            f"‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–æ: {created_date}\n"
            f"‚Ä¢ –î–æ: {scheduled_date}"
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=kb.get_filled_cell_keyboard(cell_id)
        )
        
    else:
        await callback.message.edit_text(
            f"üì¶ <b>–Ø—á–µ–π–∫–∞ ‚Ññ{cell.id}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> üîì –°–≤–æ–±–æ–¥–Ω–∞\n\n"
            "–≠—Ç–∞ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=kb.build_empty_cell(cell_id)
        )
