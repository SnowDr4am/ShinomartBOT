import os

from aiogram import F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from datetime import datetime, date

from app.handlers.main import employee_router, media_router
from app.utils.states import StorageCellStates
import app.keyboards.employee.storage_cells.add_cell_data as kb
import app.database.StorageCellsService as storage_service
import app.database.requests as rq
from app.utils.func import update_message_ids_in_state, delete_message_in_state
from app.utils.word import generate_storage_word_document


# ==================== –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏ ====================
@employee_router.callback_query(F.data.startswith("start_add_cell_data:"))
async def handle_start_add_cell_data(callback: CallbackQuery, state: FSMContext):
    cell_id = int(callback.data.split(":")[-1])
    await state.update_data(cell_id=cell_id)

    sent = await callback.message.edit_text(
        "üì± <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞</b>\n"
        "–ü—Ä–∏–º–µ—Ä: +7 999 123-45-67\n\n",
        parse_mode="HTML",
        reply_markup=kb.generate_simple_keyboard("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"storage_cell:{cell_id}")
    )
    await update_message_ids_in_state(state, "action_message_ids", sent.message_id)
    await state.set_state(StorageCellStates.waiting_phone_number)

@employee_router.message(StorageCellStates.waiting_phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await update_message_ids_in_state(state, "action_message_ids", message.message_id)
    phone = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_exists = await rq.check_mobile_phone(phone)

    if not user_exists:
        sent = await message.answer(
            "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            parse_mode="HTML"
        )
        return await update_message_ids_in_state(state, "action_message_ids", sent.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(user_phone=phone)

    sent = await message.answer(
        "üõû <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è:</b>",
        parse_mode="HTML",
        reply_markup=kb.storage_type_keyboard
    )
    await state.set_state(StorageCellStates.waiting_storage_type)
    await update_message_ids_in_state(state, "action_message_ids", sent.message_id)


@employee_router.callback_query(StorageCellStates.waiting_storage_type, F.data.startswith("storage_type:"))
async def process_storage_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    storage_type = callback.data.split(":")[1]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É
    if storage_type == "–®–∏–Ω—ã —Å –¥–∏—Å–∫–∞–º–∏":
        price = 3500
    else:
        price = 3000

    await state.update_data(storage_type=storage_type, price=price)

    sent = await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: <b>{storage_type}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{price} —Ä—É–±.</b>\n\n"
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        "<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: Nokian 205/55 R16)</i>\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'</i>",
        parse_mode="HTML"
    )
    await state.set_state(StorageCellStates.waiting_description)
    await update_message_ids_in_state(state, "action_message_ids", sent.message_id)


@employee_router.message(StorageCellStates.waiting_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await update_message_ids_in_state(state, "action_message_ids", message.message_id)

    description = message.text.strip()
    await state.update_data(description=description)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Å—è—Ü–∞–º–∏
    current_year = datetime.now().year
    keyboard = await kb.generate_month_keyboard(current_year)

    await state.update_data(current_year=current_year)

    await message.answer(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è:</b>\n"
        "<i>(–¥–æ –∫–∞–∫–æ–≥–æ –º–µ—Å—è—Ü–∞)</i>",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.set_state(StorageCellStates.waiting_scheduled_month)


@employee_router.callback_query(StorageCellStates.waiting_scheduled_month, F.data.startswith("storage_year:"))
async def change_year(callback: CallbackQuery, state: FSMContext):
    """–°–º–µ–Ω–∞ –≥–æ–¥–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    await callback.answer()

    year = int(callback.data.split(":")[1])
    await state.update_data(current_year=year)

    keyboard = await kb.generate_month_keyboard(year)

    await callback.message.edit_text(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è:</b>\n"
        "<i>(–¥–æ –∫–∞–∫–æ–≥–æ –º–µ—Å—è—Ü–∞)</i>",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@employee_router.callback_query(StorageCellStates.waiting_scheduled_month, F.data.startswith("storage_month:"))
async def process_scheduled_month(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
    parts = callback.data.split(":")
    year = int(parts[1])
    month = int(parts[2])

    scheduled_date = date(year, month, 1)
    await state.update_data(scheduled_month=scheduled_date)

    sent = await callback.message.edit_text(
        f"‚úÖ –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: <b>{scheduled_date.strftime('%B %Y')}</b>\n\n"
        "üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b>\n"
        "<i>(–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ)</i>\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ <b>'–≥–æ—Ç–æ–≤–æ'</b>",
        parse_mode="HTML"
    )
    await state.update_data(photos=[])
    await state.set_state(StorageCellStates.waiting_photos)
    await update_message_ids_in_state(state, "action_message_ids", sent.message_id)


@media_router.message(StorageCellStates.waiting_photos)
async def handle_photos(message: Message, state: FSMContext, album: list[Message] = None):
    """–°–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    data = await state.get_data()
    current_photos = data.get("photos", [])

    if album:
        for msg in album:
            if msg.photo:
                file_id = msg.photo[-1].file_id
                current_photos.append(file_id)
            await update_message_ids_in_state(state, "action_message_ids", msg.message_id)

        await state.update_data(photos=current_photos)
        sent = await message.answer(
            f"üì∑ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ:</b> {len(current_photos)}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ì–æ—Ç–æ–≤–æ¬ª</b> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
            parse_mode='HTML',
            reply_markup=kb.cell_data_complete_photo_report
        )
        return await update_message_ids_in_state(state, "action_message_ids", sent.message_id)

    if message.photo:
        file_id = message.photo[-1].file_id
        current_photos.append(file_id)
        await state.update_data(photos=current_photos)
        await update_message_ids_in_state(state, "action_message_ids", message.message_id)
        sent = await message.answer(
            f"üì∑ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ:</b> {len(current_photos)}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ì–æ—Ç–æ–≤–æ¬ª</b> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
            parse_mode='HTML',
            reply_markup=kb.cell_data_complete_photo_report
        )
        return await update_message_ids_in_state(state, "action_message_ids", sent.message_id)

    sent = await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ",
                                reply_markup=kb.cell_data_complete_photo_report)
    await update_message_ids_in_state(state, "action_message_ids", message.message_id)
    await update_message_ids_in_state(state, "action_message_ids", sent.message_id)


@employee_router.callback_query(F.data == "storage_cells:complete_photo_report")
async def finish_photo_collection(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    data = await state.get_data()
    photos = data.get("photos", [])

    if not photos:
        return await callback.answer(
            "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏.",
            show_alert=True
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cell_id = data.get("cell_id")
    user_phone = data.get("user_phone")
    storage_type = data.get("storage_type")
    price = data.get("price")
    description = data.get("description")
    scheduled_month = data.get("scheduled_month")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = await rq.get_user_by_phone(user_phone)
    worker_data = await rq.get_user_by_tg_id(callback.from_user.id)

    meta_data = {"photos": photos}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    cell_storage = await storage_service.save_or_update_cell_storage(
        cell_id=cell_id,
        worker_id=worker_data.id,
        user_id=user_data.id,
        storage_type=storage_type,
        price=price,
        description=description,
        scheduled_month=scheduled_month,
        meta_data=meta_data
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Word –¥–æ–∫—É–º–µ–Ω—Ç
    word_file = await generate_storage_word_document(cell_storage, user_data, worker_data)

    if word_file and os.path.exists(word_file):
        document = FSInputFile(word_file)
        await callback.message.answer_document(
            document=document,
            caption=f"–§–∞–π–ª –¥–ª—è –æ—Ç—á–µ—Ç–∞",
            reply_markup=kb.delete_message_keyboard
        )

    await delete_message_in_state(callback.bot, state, callback.from_user.id)
    await state.clear()

    await callback.message.answer(
        f"–Ø—á–µ–π–∫–∞ #{cell_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞",
        parse_mode="HTML",
        reply_markup=kb.generate_simple_keyboard("–ù–∞–∑–∞–¥", "storage_open_cells")
    )