import os

from aiogram import F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from datetime import datetime, date

from app.handlers.main import employee_router
from app.utils.states import StorageCellStates
import app.keyboards.employee.storage_cells.interaction_with_cell_data as kb
import app.database.StorageCellsService as storage_service
import app.database.requests as rq
from app.utils.word import generate_storage_word_document


# ==================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —è—á–µ–π–∫–æ–π ====================


# ==================== –û—Ç–ø—Ä–∞–≤–∫–∞ WORD —Ñ–∞–π–ª–∞ ====================

@employee_router.callback_query(F.data.startswith("storage_generate_word:"))
async def regenerate_word_document(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Word-–¥–æ–∫—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)"""
    await callback.answer()

    cell_id = int(callback.data.split(":")[-1])
    cell = await storage_service.get_cell(cell_id)

    if not cell or not cell.cell_storage:
        return await callback.answer("‚ùå –Ø—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞!", show_alert=True)

    cell_folder = os.path.join("static", "storage_cells", str(cell_id))
    latest_file_path = None
    if os.path.isdir(cell_folder):
        files = [
            os.path.join(cell_folder, f)
            for f in os.listdir(cell_folder)
            if
            os.path.isfile(os.path.join(cell_folder, f)) and (f.lower().endswith(".docx") or f.lower().endswith(".txt"))
        ]
        if files:
            latest_file_path = max(files, key=lambda p: os.path.getmtime(p))

    if latest_file_path and os.path.exists(latest_file_path):
        return await callback.message.answer_document(
            document=FSInputFile(latest_file_path),
            caption=f"üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —è—á–µ–π–∫–∏ ‚Ññ{cell_id}</b>",
            parse_mode="HTML",
            reply_markup=kb.delete_message_keyboard
        )

    storage = cell.cell_storage
    user_data = await rq.get_user_by_phone(storage.user_id)
    worker_data = await rq.get_user_by_id(user_id=storage.worker_id)
    word_file = await generate_storage_word_document(storage, user_data, worker_data)

    if word_file and os.path.exists(word_file):
        await callback.message.answer_document(
            document=FSInputFile(word_file),
            caption=f"üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —è—á–µ–π–∫–∏ ‚Ññ{cell_id}</b>\n(—Å–æ–∑–¥–∞–Ω —Å–µ–π—á–∞—Å, —Ç.–∫. —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª–æ —Ñ–∞–π–ª–æ–≤)",
            parse_mode="HTML",
            reply_markup=kb.delete_message_keyboard
        )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç!", show_alert=True)


# ==================== –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è ====================

@employee_router.callback_query(F.data.startswith("storage_extend:"))
async def extend_storage_period(callback: CallbackQuery, state: FSMContext):
    cell_id = int(callback.data.split(":")[1])
    await state.update_data(extend_cell_id=cell_id)

    cell = await storage_service.get_cell(cell_id)
    scheduled_month = getattr(getattr(cell, "cell_storage", None), "scheduled_month", None)

    if scheduled_month:
        current_year = scheduled_month.year
        selected_month = scheduled_month.month
        await state.update_data(
            current_year=current_year,
            selected_month=selected_month,
            selected_year=current_year
        )
    else:
        current_year = datetime.now().year
        selected_month = None
        await state.update_data(current_year=current_year, selected_month=None, selected_year=None)

    keyboard = await kb.generate_month_keyboard(current_year, cell_id, selected_month)

    await callback.message.edit_text(
        f"üìÖ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —è—á–µ–π–∫–∏ ‚Ññ{cell_id}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.set_state(StorageCellStates.waiting_extend_month)



@employee_router.callback_query(StorageCellStates.waiting_extend_month, F.data.startswith("storage_year:"))
async def extend_change_year(callback: CallbackQuery, state: FSMContext):
    year = int(callback.data.split(":")[1])
    await state.update_data(current_year=year)

    data = await state.get_data()
    cell_id = data.get("extend_cell_id")
    selected_month = data.get("selected_month")
    selected_year = data.get("selected_year")

    highlight_month = selected_month if selected_year == year else None

    keyboard = await kb.generate_month_keyboard(year, cell_id, highlight_month)

    await callback.message.edit_text(
        f"üìÖ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —è—á–µ–π–∫–∏ ‚Ññ{cell_id}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü:",
        parse_mode="HTML",
        reply_markup=keyboard
    )



@employee_router.callback_query(StorageCellStates.waiting_extend_month, F.data.startswith("storage_month:"))
async def process_extend_month(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏"""
    parts = callback.data.split(":")
    year = int(parts[1])
    month = int(parts[2])

    new_date = date(year, month, 1)

    data = await state.get_data()
    cell_id = data.get("extend_cell_id")

    await state.update_data(selected_month=month, current_year=year)

    success = await storage_service.update_scheduled_month(cell_id, new_date)

    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–ª—ë–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π —Å—Ä–æ–∫: <b>{format_month_ru(new_date)}</b>",
            parse_mode="HTML",
            reply_markup=kb.generate_simple_keyboard("–ù–∞–∑–∞–¥", f"storage_cell:{cell_id}")
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è!",
            parse_mode="HTML",
            reply_markup=kb.generate_simple_keyboard("–ù–∞–∑–∞–¥", f"storage_cell:{cell_id}")
        )

    await state.clear()


# ==================== –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —è—á–µ–π–∫–∏ ====================

@employee_router.callback_query(F.data.startswith("storage_free:"))
async def free_storage_cell(callback: CallbackQuery):
    """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —è—á–µ–π–∫–∏"""
    await callback.answer()

    cell_id = int(callback.data.split(":")[1])
    keyboard = await kb.get_confirmation_keyboard("free", cell_id)

    await callback.message.edit_text(
        f"üîì <b>–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —è—á–µ–π–∫–∏ ‚Ññ{cell_id}</b>\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —è—á–µ–π–∫—É?\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode="HTML",
        reply_markup=keyboard
    )


# ==================== –£–¥–∞–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ ====================

@employee_router.callback_query(F.data.startswith("storage_delete:"))
async def delete_storage_cell(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏"""
    await callback.answer()

    cell_id = int(callback.data.split(":")[1])
    keyboard = await kb.get_confirmation_keyboard("delete", cell_id)

    await callback.message.edit_text(
        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ ‚Ññ{cell_id}</b>\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–ù–û–°–¢–¨–Æ —É–¥–∞–ª–∏—Ç—å —è—á–µ–π–∫—É?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        parse_mode="HTML",
        reply_markup=keyboard
    )


@employee_router.callback_query(F.data.startswith("storage_confirm:"))
async def confirm_action(callback: CallbackQuery):
    parts = callback.data.split(":")
    action = parts[1]
    cell_id = int(parts[2])

    if action == "delete":
        # –£–¥–∞–ª—è–µ–º —è—á–µ–π–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
        success = await storage_service.delete_storage_cell(cell_id)
        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–Ø—á–µ–π–∫–∞ ‚Ññ{cell_id} —É–¥–∞–ª–µ–Ω–∞!</b>",
                parse_mode="HTML",
                reply_markup=kb.generate_simple_keyboard("–ù–∞–∑–∞–¥", "storage_open_cells")
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —è—á–µ–π–∫—É!",
                parse_mode="HTML",
                reply_markup=kb.generate_simple_keyboard("–ù–∞–∑–∞–¥", "storage_open_cells")
            )


RU_MONTHS_NOM = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç",
    "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å",
    "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]

def format_month_ru(dt) -> str:
    return f"{RU_MONTHS_NOM[dt.month - 1]} {dt.year}"