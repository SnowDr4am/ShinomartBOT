from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


def generate_cells_keyboard(cells: list, page: int = 1) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 10x10 –¥–ª—è —è—á–µ–µ–∫"""
    cells_per_page = 100  # 10x10
    keyboard = []
    
    total_cells = len(cells)
    total_pages = (total_cells + cells_per_page - 1) // cells_per_page if total_cells > 0 else 1
    
    start = (page - 1) * cells_per_page
    end = start + cells_per_page
    cells_on_page = cells[start:end] if cells else []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 —Ä—è–¥–æ–≤ –ø–æ 10 –∫–Ω–æ–ø–æ–∫
    for row in range(10):
        row_buttons = []
        for col in range(10):
            cell_index = start + row * 10 + col
            
            if cell_index < len(cells):
                cell = cells[cell_index]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç–∞ –ª–∏ —è—á–µ–π–∫–∞
                if cell.cell_storage:
                    button_text = f"‚úÖ {cell.id}"
                else:
                    button_text = f"{cell.id}"
                callback_data = f"storage_cell:{cell.id}"
            else:
                # –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞
                button_text = "¬∑"
                callback_data = "ignore"
            
            row_buttons.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
        keyboard.append(row_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if total_pages > 1:
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"storage_page:{page-1}")
            )
        pagination_buttons.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore")
        )
        if page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"storage_page:{page+1}")
            )
        keyboard.append(pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="storage_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_empty_cell(cell_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å —è—á–µ–π–∫—É", callback_data=f"start_add_cell_data:{cell_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="storage_open_cells")]
    ])

def get_filled_cell_keyboard(cell_id: int) -> InlineKeyboardMarkup:
    """–≠—Å—Ç–µ—Ç–∏—á–Ω–∞—è –∏ —É–¥–æ–±–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data=f"storage_generate_word:{cell_id}"),
        ],
        [
            InlineKeyboardButton(text="üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ", callback_data=f"storage_extend:{cell_id}"),
            InlineKeyboardButton(text="üîì –û—Å–≤–æ–±–æ–¥–∏—Ç—å", callback_data=f"storage_free:{cell_id}"),
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —è—á–µ–π–∫—É", callback_data=f"storage_delete:{cell_id}")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="storage_open_cells")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)