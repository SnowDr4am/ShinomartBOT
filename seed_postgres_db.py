#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
from sqlalchemy import select

from app.database.model.database import AsyncSessionLocal
from app.database.model.item_type import ItemType
from app.database.model.categories import Category


ITEM_TYPES = ["–†–µ–∑–∏–Ω–∞", "–î–∏—Å–∫–∏"]
R_VALUES = [f"R{r}" for r in range(13, 23)]


async def seed_initial_data():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    async with AsyncSessionLocal() as session:
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for val in ITEM_TYPES:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
            result = await session.execute(select(ItemType).where(ItemType.value == val))
            item_type = result.scalar_one_or_none()

            if not item_type:
                item_type = ItemType(value=val)
                session.add(item_type)
                await session.flush()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: {val}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
            result = await session.execute(
                select(Category.value).where(Category.type_id == item_type.id)
            )
            existing_categories = {row[0] for row in result.all()}

            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for r in R_VALUES:
                if r not in existing_categories:
                    category = Category(value=r, type_id=item_type.id)
                    session.add(category)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {r} –¥–ª—è —Ç–∏–ø–∞ {val}")

        await session.commit()
        print("\nüéâ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await seed_initial_data()


if __name__ == "__main__":
    asyncio.run(main())


